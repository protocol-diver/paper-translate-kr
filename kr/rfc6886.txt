Independent Submission                                       S. Cheshire
Request for Comments: 6886                                   M. Krochmal
Category: Informational                                       Apple Inc.
ISSN: 2070-1721                                               April 2013

                        NAT-PMP(NAT 포트 매핑 프로토콜)

개요

   이 문서는 네트워크 주소 변환(NAT) 포트 매핑 생성 프로세스를 자동화하기 위한 프로토콜을 
   설명합니다. 프로토콜에는 NAT 게이트웨이의 외부 IPv4 주소를 검색하는 방법이 포함되어 있어
   클라이언트가 외부 IPv4 주소와 포트를 통신하려는 피어에게 알릴 수 있습니다. 2005년부터
   이 프로토콜은 Mac OS X, Windows용 Bonjour, AirPort 무선 베이스 스테이션을 포함한
   Apple 제품에 구현되었습니다. 2013년에 NAT-PMP(NAT Port Mapping Protocol)는
   IETF Standards Track RFC "PCP(Port Control Protocol)"로 대체되었습니다.
   이 프로토콜은 NAT-PMP를 기반으로 하며 호환되는 패킷 형식을 사용하지만 여러 가지 중요한
   개선 사항이 추가되었습니다.

Status of This Memo

   이 문서는 인터넷 표준 추적 사양이 아닙니다. 정보 제공의 목적으로 게시됩니다.

   이것은 다른 RFC 스트림과 독립적으로 RFC 시리즈에 대한 기여입니다. RFC 편집자는 재량에
   따라 이 문서를 게시하도록 선택했으며 구현 또는 배포의 가치에 대해 언급하지 않습니다.
   RFC 편집자가 게시하도록 승인한 문서는 인터넷 표준 수준의 후보가 아닙니다. RFC 5741의
   섹션 2를 참조하십시오.

   이 문서의 현재 상태, 오류 및 피드백 제공 방법에 대한 정보는 다음에서 얻을 수 있습니다.
   http://www.rfc-editor.org/info/rfc6886.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   이 문서는 이 문서의 발행일에 유효한 BCP 78 및 IETF 문서에 관한 IETF 트러스트의 법적
   조항(http://trustee.ietf.org/license-info)의 적용을 받습니다. 이 문서와 관련된
   귀하의 권리 및 제한 사항을 설명하므로 이 문서를 주의 깊게 검토하십시오.

목차

   1. Introduction
      (소개)
      1.1. Transition to Port Control Protocol
           (Port Control Protocol로의 전환)
   2. Conventions and Terminology Used in This Document
      (이 문서에서 사용되는 규약 및 용어)
   3. Protocol and Packet Format
      (프로토콜 및 패킷 형식)
      3.1. Requests and Responses
           (요청 및 응답)
      3.2. Determining the External Address
           (외부 주소 결정)
      3.3. Requesting a Mapping
           (매핑 요청)
      3.4. Destroying a Mapping
           (매핑 제거)
      3.5. Result Codes
           (결과 코드)
      3.6. Seconds Since Start of Epoch
           (에포크 시작 이후의 초단위)
      3.7. Recreating Mappings on NAT Gateway Reboot
           (NAT 게이트웨이 재부팅 시 매핑 재생성)
      3.8. NAT Gateways with NAT Function Disabled
           (NAT 기능이 비활성화된 NAT 게이트웨이)
      3.9. All Mappings Are Bidirectional
           (모든 매핑은 양방향)
   4. UNSAF Considerations
      (UNSAF 고려 사항)
      4.1. Scope
           (범위)
      4.2. Transition Plan
           (전환 계획)
      4.3. Failure Cases
           (실패사례)
      4.4. Long-Term Solution
           (장기적 해결책)
      4.5. Existing Deployed NATs
           (기존 배포된 NAT들)
   5. Security Considerations
      (보안 고려 사항)
   6. IANA Considerations
      (IANA 고려 사항)
   7. Acknowledgments
      (감사의 말)
   8. Deployment History
      (배포 내역)
   9. Noteworthy Features of NAT Port Mapping Protocol and PCP
      (NAT 포트 매핑 프로토콜 및 PCP의 주목할만한 기능)
      9.1. Simplicity
           (간단함)
      9.2. Focused Scope
           (집중 범위)
      9.3. Efficiency
           (능률)
      9.4. Atomic Allocation Operations
           (원자 할당 작업)
      9.5. Garbage Collection
           (가비지 컬렉션)
      9.6. State Change Announcements
           (상태 변경 알림)
      9.7. Soft State Recovery
           (비규율 복구)
      9.8. On-Path NAT Discovery
           (On-Path NAT 검색)
   10. References
      10.1. Normative References
      10.2. Informative References

1.  Introduction (소개)

   NAT(Network Address Translation)는 하나의 공용 인터넷 주소를 여러 장치와 공유하는 
   방법입니다. 이 문서는 공식적으로 "NAPT"(네트워크 주소/포트 변환기)[RFC2663]로 분류되는
   장치에 중점을 둡니다. NAT에 대한 전체 설명은 이 문서의 범위를 벗어납니다. 다음 간략한
   개요에서는 이 포트 매핑 프로토콜과 관련된 측면을 다룹니다. NAT에 대한 자세한 내용은 
   "전통적인 IP 네트워크 주소 변환기(전통적인 NAT)" [RFC3022]를 참조하십시오.

   NAT에는 하나 이상의 외부 IP 주소가 있습니다. 사설 네트워크는 NAT 뒤에 설정됩니다. 
   NAT 뒤의 사설 네트워크에 있는 클라이언트 장치에는 사설 주소가 할당되며 이러한 클라이언트
   장치는 NAT 장치의 사설 주소를 기본 게이트웨이로 사용합니다.

   NAT 뒤에 있는 장치의 패킷이 공인 인터넷의 주소로 전송되면 패킷은 먼저 NAT를 통과합니다.
   NAT는 수신 포트와 주소를 확인합니다. 경우에 따라 NAT는 target 포트와 주소도 추적합니다.
   그런 다음 NAT는 매핑이 아직 존재하지 않는 경우 내부 주소 및 내부 포트에서 외부 주소 및
   외부 포트로의 매핑을 생성합니다.

   NAT는 패킷의 내부 주소와 포트를 매핑의 외부 항목으로 바꾸고 패킷을 다음 게이트웨이로
   보냅니다.

   인터넷의 어떤 주소에서건 패킷이 NAT의 외부에서 수신되면 NAT는 매핑 목록에서 도착지 주소와
   포트(외부 주소 및 포트)를 조회합니다. 항목이 발견되면 패킷을 보내야 하는 내부 주소와 포트가
   포함됩니다. 그런 다음 NAT 게이트웨이는 도착지 주소와 포트를 매핑의 주소와 포트로 다시
   씁니다. 그러면 패킷이 새 도착지 주소로 전달됩니다. 패킷이 매핑과 일치하지 않으면 패킷이
   삭제될 가능성이 큽니다. 다양한 NAT는 이를 처리하기 위해 다양한 전략을 구현합니다. 주목해야
   할 중요한 점은 매핑이 없으면 NAT가 패킷을 보내야 하는 내부 주소를 알 수 없다는 것입니다.

   매핑은 일반적으로 아웃바운드 패킷을 관찰한 결과 자동으로 생성됩니다. 몇 가지 예외가 있습니다.
   일부 NAT는 외부 포트를 특정 내부 IP 주소 및 포트에 매핑하는 수동 생성 영구 매핑을 허용할
   수 있습니다. 이러한 매핑은 해당 내부 주소를 사용하여 장치에 대한 수신 연결을 허용합니다.
   또한 NAT는 다른 특정 매핑과 일치하지 않는 인바운드 패킷이 지정된 내부 주소로 전달되는 기본
   매핑을 구현합니다. 두 유형의 매핑은 일반적으로 일부 구성 도구를 통해 수동으로 설정됩니다.
   이러한 포트 매핑의 수동 구성은 대부분의 주거용 NAT 사용자에게 부당하게 번거롭습니다.

   수동으로 생성된 인바운드 포트 매핑이 없으면 NAT 뒤의 클라이언트는 인바운드 연결을 수신할 수
   없으며 이는 원래 인터넷 아키텍처[ETEAISD]와 비교할 때 연결 손실을 나타냅니다. 이러한 연결
   손실을 나쁜 것으로 보는 사람들에는 NAT-PMP가 클라이언트가 공용 IPv4 주소를 사용하여 공인
   인터넷에 직접 연결된 호스트처럼 작동할 수 있도록 합니다. NAT-PMP를 사용하면 클라이언트
   호스트가 NAT 게이트웨이와 통신하여 요청 시 인바운드 매핑 생성을 요청할 수 있습니다.
   인바운드 연결을 허용하는 NAT 매핑을 생성한 클라이언트는 외부 IPv4 주소와 외부 포트를 공인
   레지스트리(예: 전 세계 도메인 이름 시스템)에 기록하거나 통신하려는 피어가 액세스할 수
   있도록 할 수 있습니다.

1.1.  Transition to Port Control Protocol (Port Control Protocol로의 전환)

   NAT-PMP는 거의 10년 동안 유용한 서비스를 누렸고 NAT-PMP를 사용한 운영 경험은 IETF
   표준 트랙 후속 제품인 포트 제어 프로토콜(PCP) [RFC6887]의 설계에 영향을 미쳤습니다.
   PCP는 동일한 UDP 포트 5350 및 5351과 호환되는 패킷 형식을 사용하여 NAT-PMP를
   기반으로 합니다. PCP는 또한 IPv6 지원, 아웃바운드 매핑 관리, 방화벽 규칙 관리, 외부
   주소 풀이 있는 대규모 NAT와의 완전한 호환성, 오류 수명 및 향후 개선을 가능하게 하는 확장
   메커니즘을 포함하여 상당한 개선 사항을 추가합니다.

   PCP의 상당한 향상으로 인해 기존의 모든 NAT-PMP 구현은 PCP로 마이그레이션하는 것이
   좋습니다. 패킷 헤더의 버전 번호는 NAT-PMP의 경우 0, PCP의 경우 2이므로 패킷을 쉽게
   구분할 수 있습니다. (버전 번호 1은 IETF 표준과 호환되지 않는 프로토콜을 사용하는 제품을
   배송하는 공급업체에서 사용했습니다. MUST NOT:{PCP 구현은 버전 번호 1을 사용하면
   안 됩니다}.)

   NAT-PMP 서버의 경우 PCP 지원을 추가하는 것은 간단합니다. 패킷이 수신될 때 버전 번호가
   2이면 패킷이 PCP 요청으로 해석되고 요청이 처리되며 해당 매핑과 관련된 응답 및 업데이트가
   PCP 형식을 사용하여 전송됩니다. 버전 번호가 0이면 기존 코드가 요청을 정확히 처리하고 해당
   매핑과 관련된 응답 및 업데이트가 NAT-PMP 형식을 사용하여 전송됩니다. 버전 번호가 1이거나
   기타 지원되지 않는 버전인 경우 결과 코드 1(지원되지 않는 버전)이 반환됩니다.

   NAT-PMP 클라이언트는 PCP 지원을 추가해야 하며 기본적으로 PCP 형식을 사용하여 요청을
   보내야 합니다. 이렇게 하면 클라이언트가 가능한 경우 최신 형식을 선호하게 됩니다. PCP
   요청이 새로운 PCP 형식을 이해하지 못하는 기존 NAT-PMP 서버로 전송되면 결과 코드 1
   (지원되지 않는 버전)을 반환하고 클라이언트는 NAT-PMP 형식을 사용하여 동일한 요청을 즉시
   재시도해야 합니다. 지원되지 않는 버전 응답이 있으면 시간 초과, 재전송 또는 기타 임의
   지연을 기다리지 않고 NAT-PMP 형식으로 빠르게 장애 조치할 수 있습니다.
   현재 NAT-PMP만 지원하는 NAT 게이트웨이라도 NAT 펌웨어가 업데이트되며 내일이라도
   PCP를 지원할 수 있으므로 SHOULD NOT:{클라이언트는 주어진 서버가 NAT-PMP만
   지원하더라도 해당 서버에 대해 기본적으로 NAT-PMP만 지원한다고 기록하면 안 됩니다}.

2.  Conventions and Terminology Used in This Document (이 문서에서 사용되는 규약 및 용어)

   이 문서에서 키워드 "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" 및 "OPTIONAL"은 
   "요구 수준을 나타내기 위해 RFC에서 사용하기 위한 키워드"[RFC2119]에 설명된 대로
   해석됩니다.

3.  Protocol and Packet Format (프로토콜 및 패킷 형식)

   NAT 포트 매핑 프로토콜은 UDP를 통해 실행됩니다. 모든 패킷은 8비트 버전으로 시작하여
   8비트 연산 코드가 뒤따릅니다.

   단일 바이트보다 큰 NAT-PMP의 모든 숫자들(예: 오류 값, Epoch 시작 이후 초, 매핑 수명)
   은 기존 IETF 네트워크 바이트 순서(즉, 최상위 바이트 우선)로 전송됩니다.

   단일 바이트보다 큰 NAT-PMP의 숫자가 아닌 것들(예: NAT 게이트웨이의 외부 IP 주소)은
   바이트 교환 없이 기존 바이트 순서로 전송됩니다.

   이 문서는 프로토콜의 버전 0에 대해 명세합니다. 이 버전의 프로토콜을 구현하는 모든 NAT-PMP
   게이트웨이는 버전 번호가 0이 아닌 요청을 수신하면 버전 필드에서 지원하는 가장 높은 버전
   번호(예: 0)를 응답의 버전 필드에 넣고 결과 코드 1(지원되지 않는 버전)을 반환해야 합니다.
   응답의 0에서 127 사이의 opcode는 클라이언트 요청입니다. 128에서 255까지의 opcode는
   해당 서버 응답입니다. 응답에는 항상 네트워크 바이트 순서의 16비트 결과 코드가 포함됩니다.
   결과 코드 0은 성공을 나타냅니다. 또한 응답에는 NAT 게이트웨이가 재부팅되었거나 포트 매핑
   상태가 재설정된 이후 경과된 시간(초)에 해당하는 32비트 부호 없는 정수가 포함됩니다.

   SHOULD:{이 프로토콜은 클라이언트가 기본 IPv4 주소가 "Address Allocation for
   Private Internets"[RFC1918]에 정의된 개인 IPv4 주소 범위 중 하나에 있다고
   판단하는 경우에만 사용}해야 합니다. 여기에는 주소 범위 10/8, 172.16/12 및
   192.168/16이 포함됩니다.
   
   클라이언트는 DHCP[RFC2131] 또는 유사한 수단을 통해 학습한 대로 항상 NAT-PMP 요청을
   기본 게이트웨이로 보냅니다. 이 프로토콜은 클라이언트의 기본 게이트웨이가 해당 네트워크의
   NAT이기도 한 단일 논리 링크(서브넷)가 있는 소규모 홈 네트워크용으로 설계되었습니다. NAT가
   클라이언트의 기본 게이트웨이가 아닌 일부 장치인 보다 복잡한 네트워크의 경우 이 프로토콜이
   적합하지 않습니다.

3.1.  Requests and Responses (요청 및 응답)

   NAT 게이트웨이는 메모리와 CPU 속도가 제한된 저비용 장치인 경우가 많습니다. 이러한 이유로
   NAT 게이트웨이에 대한 과도한 요구를 피하기 위해 SHOULD NOT:{클라이언트는 여러 동시
   요청을 발행해서는 안 됩니다}. 클라이언트가 여러 요청을 수행해야 하는 경우(예: 부팅 시,
   절전 모드 해제, 네트워크 연결 등) 요청을 대기열에 넣고 한 번에 하나씩 직렬로 발행해야
   합니다. NAT 게이트웨이가 하나의 요청에 응답하면 클라이언트 시스템이 다음 요청을 발행할 수
   있습니다. 빠른 NAT 게이트웨이의 경우 클라이언트는 초당 수백 속도로 요청을 완료할 수
   있습니다. NAT-PMP 요청에 응답하는데 0.5초 정도 걸리는 느린 NAT 게이트웨이의 경우
   SHOULD:{클라이언트는 NAT 게이트웨이가 관리할 수 있는 속도로 작동하도록 허용한 것을
   존중}해야 합니다. 또한, 요청에 응답하는 속도보다 빠르게 요청을 발행하여 과부하를 일으키지
   않아야 합니다.

   외부 IPv4 주소를 결정하거나 포트 매핑을 요청하기 위해 NAT-PMP 클라이언트는 구성된
   게이트웨이 주소의 포트 5351로 요청 패킷을 보내고 응답을 위해 250ms를 기다립니다. 250ms
   후에 게이트웨이로부터 NAT-PMP 응답이 수신되지 않으면 클라이언트는 요청을 재전송하고
   500ms를 기다립니다. SHOULD:{클라이언트는 시도 간격을 매번 두 배로 늘리면서 이 프로세스를
   반복}해야 합니다. SHOULD:{9번째 시도를 보낸 후(64초 동안 기다린 후) 클라이언트가 여전히
   응답을 받지 못한 경우 이 게이트웨이가 NAT 포트 매핑 프로토콜을 지원하지 않는다고 결론}을
   내리고 이 MAY:{사실을 나타내는 오류 메시지를 기록}할 수 있습니다. 또한 NAT-PMP
   클라이언트가 게이트웨이에서 포트 5351에 대해 "ICMP 포트에 연결할 수 없음(ICMP Port
   Unreachable)" 메시지를 수신하면 나머지 재전송을 건너뛰고 게이트웨이가 NAT-PMP를
   지원하지 않는다고 즉시 결론을 내릴 수 있습니다.

   성능 최적화로서 MAY:{클라이언트는 이 정보를 기록하고 이를 사용하여 NAT-PMP를 사용하려는
   추가 시도를 억제}할 수 있지만 클라이언트는 이 정보를 너무 오래 유지해서는 안 됩니다. 특히,
   게이트웨이의 잠재적인 변경 또는 게이트웨이 구성의 변경을 나타낼 수 있는 모든 이벤트(하드웨어
   링크 변경 표시, 게이트웨이 MAC 주소 변경, 새로운 DHCP 임대 취득, 게이트웨이로부터
   NAT-PMP 알림 패킷 수신 등) 에서 클라이언트가 게이트웨이의 NAT-PMP 지원 부족에 대한
   이전 정보를 버리고 다음 NAT-PMP 요청 패킷을 정상적으로 보내도록 해야 합니다.

   포트 매핑을 삭제할 때 클라이언트는 포기하기 전에 전체 9번을 시도하지 않도록 선택할 수
   있다는 점을 제외하고 각 연속 간격에서 두 배로 증가하는 동일한 초기 250ms 시간 제한을
   사용합니다. 이는 매핑 삭제 요청이 어떤 의미에서는 권고이기 때문입니다. 효율성에는 유용하지만
   정확성에는 필요하지 않습니다. 매핑 삭제 요청을 보내기 전에 클라이언트 소프트웨어가
   충돌하거나 전원이 꺼지거나 클라이언트 장치가 네트워크에서 물리적으로 분리되는 것은 항상
   가능하므로 NAT 게이트웨이는 이에 대해 대처할 수 있어야 합니다. 이 때문에 클라이언트가 포트
   매핑 삭제를 포기하기 전에 한두 번만 재시도하는 것이 허용될 수 있지만 SHOULD:{클라이언트는
   NAT 게이트웨이에 누적되는 오래된 값의 양을 줄이기 위해 가능할 때마다 항상 적어도 하나의
   삭제 요청} 을 보내야 합니다.

   어쨌든 해당 매핑이 자연적으로 만료된 시간 이후에 클라이언트는 포트 매핑을 삭제하려고 계속
   시도할 필요가 없습니다.

3.2.  Determining the External Address (외부 주소 결정)

   NAT 뒤의 클라이언트는 외부 주소를 확인하기 위해 다음 UDP 페이로드를 구성된 게이트웨이
   주소의 포트 5351로 보냅니다.

    0                   1
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Vers = 0      | OP = 0        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   MUST:{호환되는 NAT 게이트웨이는 다음 형식으로 응답을 생성}해야 합니다.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Vers = 0      | OP = 128 + 0  | Result Code (net byte order)  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Seconds Since Start of Epoch (in network byte order)          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | External IPv4 Address (a.b.c.d)                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   이 응답은 NAT 게이트웨이가 이 버전의 프로토콜을 구현하고 NAT 게이트웨이의 외부 IPv4
   주소를 반환함을 나타냅니다. 결과 코드가 0이 아닌 경우 외부 IPv4 주소 필드의 값은 정의되지
   않습니다(MUST:{전송 시 0으로 설정해야 하며 수신 시 무시해야 함}).

   NAT 게이트웨이는 MUST:{시작 시 포트 매핑 테이블이 초기화되거나 다른 이유로 재설정된 이후
   경과된 시간으로 Seconds Since Start of Epoch 필드를 채워야 합니다}(섹션 3.6,
   "Seconds Since Start of Epoch" 참조).

   응답 패킷을 수신한 클라이언트는 MUST:{출발지 IP 주소를 확인하고 요청을 보낸 게이트웨이의
   주소가 아닌 경우 자동으로 패킷을 폐기}해야 합니다.

3.2.1.  Announcing Address Changes (주소 변경 알림)

   부팅 시, 외부 IPv4 주소 획득, 외부 IPv4 주소의 후속 변경, 재부팅 또는 NAT 매핑 상태의
   손실 또는 변경 가능성을 나타낼 수 있는 기타 이벤트 시 NAT 게이트웨이는 MUST:{클라이언트
   에게 외부 IPv4 주소 및 Epoch 시작 이후 초를 알리기 위해 위의 패킷 형식을 사용하여 링크
   로컬 멀티캐스트 주소 224.0.0.1, 포트 5350에 gratuitous 응답을 보내야 합니다}.

   패킷 손실을 수용하기 위해 NAT 게이트웨이는 10개의 주소 알림을 멀티캐스트해야 합니다. 
   SHOULD:{처음 두 알림 사이의 간격은 250ms여야 하며 각 후속 알림 사이의 간격은 두 배가
   되어야 합니다}. 불필요한 추가 매핑 갱신을 트리거하지 않도록 각 전송의 Seconds Since
   Start of Epoch 필드는 시간 경과를 반영하도록 적절하게 업데이트되어야 합니다(섹션 3.7,
   "Recreating Mappings on NAT Gateway Reboot" 참조).

   불필요한 주소 알림 패킷을 수신하면 클라이언트는 MUST:{출발지 IP 주소를 확인하고 주소가
   클라이언트의 현재 구성된 게이트웨이 주소가 아닌 경우 자동으로 패킷을 폐기}해야 합니다.
   이는 네트워크에서 활성화된 NAT 게이트웨이가 두 개 이상일 수 있는 부주의한 구성 오류를
   방지하기 위한 것입니다.

   출발지 IP 주소가 정확하면 3.6절에 설명된 대로 Seconds Since Start of Epoch 필드를
   확인하고 값이 예상 가능한 범위를 벗어나 NAT 게이트웨이 상태 손실이 발생했음을 나타내는 경우
   NAT-PMP 클라이언트는 3.7절 "Recreating Mappings on NAT Gateway Reboot"에
   설명된 대로 모든 활성 포트 매핑 임대를 즉시 다시 만듭니다.

   구현 참고 사항: NAT-PMP의 이전 구현에서는 UDP 포트 5351을 클라이언트 요청(주소 및 포트
   매핑)과 주소 알림 모두의 대상으로 사용했습니다. NAT-PMP 서버는 UDP 5351에서 클라이언트
   요청을 수신하고 NAT-PMP 클라이언트는 UDP 5351에서 서버 알림을 수신합니다. 그러나
   구현자는, 예를 들어 인터넷 공유가 활성화된 가정용 컴퓨터와 같이 단일 장치가 두 역할
   모두에서 작동할 때 어려움에 직면했습니다. 이 컴퓨터는 DHCP 클라이언트에 대해 NAT-PMP
   서버 역할을 하지만 동시에 다른 NAT 게이트웨이 뒤에 있는지 확인하기 위해 NAT-PMP
   클라이언트 역할을 해야 합니다. 원칙적으로 일부 운영 체제에서는 두 프로세스가 단일 UDP
   포트의 공유를 조정하는 것이 가능할 수 있지만 많은 플랫폼에서는 이것이 어렵거나 불가능하기
   때문에 실용적인 엔지니어링 이유로 클라이언트가 UDP 5350에서 수신하도록 하는 것이
   편리합니다. 서버는 UDP 5351에서 수신 대기합니다.

   구현 참고 사항: 지정된 호스트에는 동시에 실행 중인 독립 NAT-PMP 클라이언트가 두 개 이상
   있을 수 있으며 주소 알림은 모든 클라이언트에서 사용할 수 있어야 합니다. 따라서 클라이언트는
   다른 프로세스가 포트 5350에서도 수신할 수 있도록 SO_REUSEPORT 옵션 또는 이와 동등한
   옵션을 설정해야 합니다. 또한 구현자는 동일한 장치에 있는 하나 이상의 프로세스가 *모든*
   주소에서 포트 5350을 수신할 때 문제가 발생했습니다. 따라서 클라이언트는 0.0.0.0:5350이
   아닌 224.0.0.1:5350에 구체적으로 바인딩해야 합니다.

3.3.  Requesting a Mapping (매핑 요청)

   매핑을 생성하기 위해 클라이언트는 UDP 패킷을 다음 형식으로 게이트웨이 내부 IP 주소의 포트
   5351로 보냅니다:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Vers = 0      | OP = x        | Reserved                      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Internal Port                 | Suggested External Port       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Requested Port Mapping Lifetime in Seconds                    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   지원되는 opcode:
   1 - UDP 매핑
   2 - TCP 매핑

   MUST:{Reserved 필드는 전송 시 0으로 설정되어야 하며 수신 시 무시되어야 합니다.

   Ports와 Lifetime은 기존 네트워크 바이트 순서(즉, 최상위 바이트 먼저)로 전송됩니다.

   Internal Port는 클라이언트가 수신하는 로컬 포트로 설정됩니다.

   클라이언트가 높은 번호의 "익명" 외부 포트를 할당받는 것을 선호하는 경우 Suggested
   External Port를 0으로 설정해야 합니다. 이는 선택한 높은 번호의 포트를 게이트웨이에
   할당해야 함을 나타냅니다. 클라이언트가 가능한 경우 매핑된 외부 포트를 로컬 내부 포트와
   동일하게 하는 것을 선호하는 경우 (예: 이상적으로는 외부 포트 80을 갖고 싶어하는 포트
   80에서 수신하는 웹 서버) Suggested External Port를 원하는 값으로 설정해야 합니다.
   그러나 게이트웨이는 제안된 포트를 할당할 의무가 없으며 정책상의 이유(예: 포트 80이 예약되어
   클라이언트가 요청하지 않을 수 있음) 또는 해당 포트가 이미 다른 클라이언트에 할당되었기
   때문에 할당하지 않을 수 있습니다. 이 때문에 일부 제품 개발자는 Suggested External
   Port 필드를 갖는 것의 가치에 의문을 제기했습니다. 그 이유는 장애 복구 때문입니다. 대부분의
   저렴한 홈 NAT 게이트웨이는 영구 저장소에 임시 포트 매핑을 기록하지 않으므로 게이트웨이가
   충돌하거나 재부팅되면 모든 매핑이 손실됩니다. 갱신 패킷은 갱신의 경우 클라이언트가
   Suggested External Port 필드를 클라이언트가 원래 원했던 포트가 아니라 게이트웨이가
   실제로 할당한 포트로 설정한다는 점을 제외하면 초기 매핑 요청 패킷과 동일하게 형식이
   지정됩니다.

   새로 재부팅된 NAT 게이트웨이가 클라이언트로부터 갱신 패킷을 수신하면 포트 매핑에 대한 일반
   초기 요청처럼 게이트웨이에 표시됩니다. 단, 이 경우 Suggested External Port는 NAT
   게이트웨이가 *할당할 의향*이 있을 가능성이 높습니다(재부팅 직전에 이 클라이언트에
   할당했으므로 다시 할당할 의향이 있을 수 있습니다).

   RECOMMENDED:{권장 Port Mapping Lifetime은 7200초 (2시간)}입니다.

   포트 매핑 요청을 보낸 후 클라이언트는 NAT 게이트웨이가 응답할 때까지 기다립니다. 250ms
   후에 클라이언트가 게이트웨이로부터 응답을 받지 못한 경우 SHOULD:{클라이언트는 위의 섹션
   3.1, "요청 및 응답"에 설명된 대로 요청을 재발행}해야 합니다.

   NAT 게이트웨이는 다음 패킷 형식으로 응답합니다:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Vers = 0      | OP = 128 + x  | Result Code                   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Seconds Since Start of Epoch                                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Internal Port                 | Mapped External Port          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Port Mapping Lifetime in Seconds                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Epoch 시간, 포트 및 수명은 기존 네트워크 바이트 순서(즉, 최상위 바이트 먼저)로
   전송됩니다.

   MUST:{OP 필드의 'x'는 클라이언트가 요청한 것과 일치}해야 합니다.
   일부 NAT 게이트웨이는 해당 TCP 포트 매핑을 생성하지 않고 UDP 포트 매핑을 생성할 수
   없으며 그 반대의 경우도 마찬가지이고 이러한 게이트웨이는 MUST NOT:{이 결함이 수정될
   때까지 NAT 포트 매핑 프로토콜을 구현하면 안 됩니다}. 이 프로토콜을 구현하는 NAT
   게이트웨이는 MUST:{TCP 전용 및 UDP 전용 포트 매핑을 생성할 수 있어야 합니다}. NAT
   게이트웨이가 하나의 매핑만 요청한 클라이언트에 대한 매핑 쌍을 자동으로 생성하는 경우
   요청하지 않았거나 원하지 않는 인바운드 UDP 패킷 또는 인바운드 TCP 연결 요청을 수신하도록
   해당 클라이언트를 노출할 수 있습니다.

   NAT 게이트웨이는 MUST NOT:{클라이언트가 UDP를 요청할 때 TCP, 그 반대의 경우에 대한
   매핑 자동으로 생성해서는 안 되며}, NAT 게이트웨이는 MUST:{동일한 클라이언트가 나중에
   매핑하도록 선택할 수 있게 컴패니언 포트를 예약}해야 합니다.
   예를 들어 클라이언트가 TCP 포트 80 매핑을 요청하는 경우 클라이언트가 해당 TCP 포트 매핑에
   대한 임대를 유지하는 한 다른 내부 IP 주소를 가진 다른 클라이언트는 UDP 포트 80에 대한
   MUST NOT:{매핑을 성공적으로 획득할 수 없어야 합니다}.

   클라이언트는 일반적으로 내부 포트와 일치하는 외부 포트를 요청합니다. 해당 외부 포트를 사용할
   수 없는 경우 NAT 게이트웨이는 MUST:{가능한 경우 사용 가능한 외부 포트를 반환하거나 외부
   포트를 사용할 수 없는 경우 오류 코드를 반환}해야 합니다.

   패킷의 출발지 주소는 MUST:{매핑의 내부 주소로 사용}해야 합니다. 이 프로토콜은 다른 장치에
   대한 매핑을 생성하는 NAT 뒤에 있는 하나의 장치를 용이하게 하기 위한 것이 아닙니다. 인바운드
   매핑이 필요한 레거시 장치가 있는 경우 현재와 마찬가지로 관리 인터페이스를 통해 사용자가
   수동으로 영구 매핑을 생성할 수 있습니다.

   지정된 내부 주소 및 포트에 대한 매핑이 이미 존재하고(해당 매핑이 NAT-PMP를 사용하여
   명시적으로 생성되었는지, 나가는 TCP SYN 패킷의 결과로 암시적으로 생성되었는지 또는 인간
   관리자가 수동으로 생성했는지 여부) 해당 클라이언트가 해당 매핑에 대한 다른 매핑을 요청하는
   경우 동일한 내부 포트(다른 외부 포트를 요청할 수 있음)이면 매핑 요청이 성공하여 이미 할당된
   외부 포트를 반환해야 합니다. 이는 클라이언트가 제안된 외부 포트 X와의 매핑을 요청하고 실제
   외부 포트 Y와의 매핑이 승인되었지만 승인 패킷이 손실되는 경우를 처리하는 데 필요합니다.
   클라이언트가 매핑 요청을 재전송할 때 처음 전송된(및 손실된) 것과 동일한 긍정적 승인을 다시
   받아야 합니다.

   NAT 게이트웨이는 MUST NOT:{NAT 게이트웨이 외부 IP 주소로 향하거나 외부 네트워크
   인터페이스에서 수신된 매핑 요청을 수락해서는 안 됩니다}. NAT 게이트웨이의 내부 주소와
   일치하는 대상 주소가 있는 내부 인터페이스에서 수신된 패킷만 허용되어야 합니다.

   NAT 게이트웨이는 시작 시 포트 매핑 테이블이 초기화되거나 다른 이유로 재설정된 이후 
   MUST:{Seconds Since Start of Epoch 필드를 채워야 합니다}(섹션 3.6, "Seconds
   Since Start of Epoch" 참조).

   Port Mapping Lifetime은 부호 없는 정수(초)입니다. NAT 게이트웨이는
   MAY:{클라이언트가 요청한 수명을 줄일 수 있습니다}.
   NAT 게이트웨이는 SHOULD NOT:{클라이언트가 요청한 것보다 더 긴 임대 수명을 제공하면 안
   됩니다}.

   응답 패킷을 수신한 클라이언트는 MUST:{출발지 IP 주소를 확인하고 요청을 보낸 게이트웨이의
   주소가 아닌 경우 자동으로 패킷을 폐기}해야 합니다. 클라이언트는 SHOULD:{DHCP와 같이 만료
   시간 중간에 매핑 갱신을 시도}해야 합니다. 갱신 패킷은 클라이언트가 Suggested External
   Port를 클라이언트가 원래 제안한 것이 아니라 NAT 게이트웨이가 이전에 매핑한 것으로 설정해야
   한다는 점을 제외하면 요청 패킷과 정확히 동일하게 보여야 합니다. 위에 설명된 대로 이렇게 하면
   충돌 또는 재부팅 후 게이트웨이가 매핑 상태를 자동으로 복구할 수 있습니다.

3.4.  Destroying a Mapping

   A mapping may be destroyed in a variety of ways.  If a client fails
   to renew a mapping, then at the time its lifetime expires, the
   mapping MUST be automatically deleted.  In the common case where the
   gateway device is a combined DHCP server and NAT gateway, when a
   client's DHCP address lease expires, the gateway device MAY
   automatically delete any mappings belonging to that client.
   Otherwise, a new client being assigned the same IP address could
   receive unexpected inbound UDP packets or inbound TCP connection
   requests that it did not ask for and does not want.

   A client MAY also send an explicit packet to request deletion of a
   mapping that is no longer needed.  A client requests explicit
   deletion of a mapping by sending a message to the NAT gateway
   requesting the mapping, with the Requested Lifetime in Seconds set to
   zero.  The Suggested External Port MUST be set to zero by the client
   on sending, and MUST be ignored by the gateway on reception.

   When a mapping is destroyed successfully as a result of the client
   explicitly requesting the deletion, the NAT gateway MUST send a
   response packet that is formatted as defined in Section 3.3,
   "Requesting a Mapping".  The response MUST contain a result code of
   0, the internal port as indicated in the deletion request, an
   external port of 0, and a lifetime of 0.  The NAT gateway MUST
   respond to a request to destroy a mapping that does not exist as if
   the request were successful.  This is because of the case where the
   acknowledgment is lost, and the client retransmits its request to
   delete the mapping.  In this case, the second request to delete the
   mapping MUST return the same response packet as the first request.

   If the deletion request was unsuccessful, the response MUST contain a
   non-zero result code and the requested mapping; the lifetime is
   undefined (MUST be set to zero on transmission, and MUST be ignored
   on reception).  If the client attempts to delete a port mapping that
   was manually assigned by some kind of configuration tool, the NAT
   gateway MUST respond with a "Not Authorized" error, result code 2.
   When a mapping is destroyed as a result of its lifetime expiring or
   for any other reason, if the NAT gateway's internal state indicates
   that there are still active TCP connections traversing that now-
   defunct mapping, then the NAT gateway SHOULD send appropriately
   constructed TCP RST (reset) packets both to the local client and to
   the remote peer on the Internet to terminate that TCP connection.

   A client can request the explicit deletion of all its UDP or TCP
   mappings by sending the same deletion request to the NAT gateway with
   the external port, internal port, and lifetime set to zero.  A client
   MAY choose to do this when it first acquires a new IP address in
   order to protect itself from port mappings that were performed by a
   previous owner of the IP address.  After receiving such a deletion
   request, the gateway MUST delete all its UDP or TCP port mappings
   (depending on the opcode).  The gateway responds to such a deletion
   request with a response as described above, with the internal port
   set to zero.  If the gateway is unable to delete a port mapping, for
   example, because the mapping was manually configured by the
   administrator, the gateway MUST still delete as many port mappings as
   possible, but respond with a non-zero result code.  The exact result
   code to return depends on the cause of the failure.  If the gateway
   is able to successfully delete all port mappings as requested, it
   MUST respond with a result code of zero.

3.5.  Result Codes

   Currently defined result codes:

   0 - Success
   1 - Unsupported Version
   2 - Not Authorized/Refused
       (e.g., box supports mapping, but user has turned feature off)
   3 - Network Failure
       (e.g., NAT box itself has not obtained a DHCP lease)
   4 - Out of resources
       (NAT box cannot create any more mappings at this time)
   5 - Unsupported opcode

   If the version in the request is not zero, then the NAT-PMP server
   MUST return the following "Unsupported Version" error response to the
   client:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Vers = 0      | OP = 0        | Result Code = 1               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Seconds Since Start of Epoch (in network byte order)          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   If the opcode in the request is 128 or greater, then this is not a
   request; it's a response, and the NAT-PMP server MUST silently ignore
   it.  Otherwise, if the opcode in the request is less than 128, but is
   not a supported opcode (currently 0, 1, or 2), then the entire
   request MUST be returned to the sender, with the top bit of the
   opcode set (to indicate that this is a response) and the result code
   set to 5 (Unsupported opcode).

   For version 0 and a supported opcode (0, 1, or 2), if the operation
   fails for some reason (Not Authorized, Network Failure, or Out of
   resources), then a valid response MUST be sent to the client, with
   the top bit of the opcode set (to indicate that this is a response)
   and the result code set appropriately.  Other fields in the response
   MUST be set appropriately.  Specifically:

   o Seconds Since Start of Epoch MUST be set correctly

   o The External IPv4 Address should be set to the correct address, or
     to 0.0.0.0, as appropriate.

   o The Internal Port MUST be set to the client's requested Internal
     Port.  This is particularly important, because the client needs
     this information to identify which request suffered the failure.

   o The Mapped External Port and Port Mapping Lifetime MUST be set
     appropriately -- i.e., zero if no successful port mapping was
     created.

   Should future NAT-PMP opcodes be defined, their error responses MUST
   similarly be specified to include sufficient information to identify
   which request suffered the failure.  By design, NAT-PMP messages do
   not contain any transaction identifiers.  All NAT-PMP messages are
   idempotent and self-describing; therefore, the specifications of
   future NAT-PMP messages need to include enough information for their
   responses to be self-describing.
   Clients MUST be able to properly handle result codes not defined in
   this document.  Undefined results codes MUST be treated as fatal
   errors of the request.

3.6.  Seconds Since Start of Epoch

   Every packet sent by the NAT gateway includes a Seconds Since Start
   of Epoch (SSSoE) field.  If the NAT gateway resets or loses the state
   of its port mapping table, due to reboot, power failure, or any other
   reason, it MUST reset its epoch time and begin counting SSSoE from
   zero again.  Whenever a client receives any packet from the NAT
   gateway, either unsolicited or in response to a client request, the
   client computes its own conservative estimate of the expected SSSoE
   value by taking the SSSoE value in the last packet it received from
   the gateway and adding 7/8 (87.5%) of the time elapsed according to
   the client's local clock since that packet was received.  If the
   SSSoE in the newly received packet is less than the client's
   conservative estimate by more than 2 seconds, then the client
   concludes that the NAT gateway has undergone a reboot or other loss
   of port mapping state, and the client MUST immediately renew all its
   active port mapping leases as described in Section 3.7, "Recreating
   Mappings on NAT Gateway Reboot".

3.7.  Recreating Mappings on NAT Gateway Reboot

   The NAT gateway MAY store mappings in persistent storage so that,
   when it is powered off or rebooted, it remembers the port mapping
   state of the network.

   However, maintaining this state is not essential for correct
   operation.  When the NAT gateway powers on or clears its port mapping
   state as the result of a configuration change, it MUST reset the
   epoch time and re-announce its IPv4 address as described in Section
   3.2.1, "Announcing Address Changes".  Reception of this packet where
   time has apparently gone backwards serves as a hint to clients on the
   network that they SHOULD immediately send renewal packets (to
   immediately recreate their mappings) instead of waiting until the
   originally scheduled time for those renewals.  Clients who miss
   receiving those gateway announcement packets for any reason will
   still renew their mappings at the originally scheduled time and cause
   their mappings to be recreated; it will just take a little longer for
   these clients.
   A mapping renewal packet is formatted identically to an original
   mapping request; from the point of view of the client, it is a
   renewal of an existing mapping, but from the point of view of the
   freshly rebooted NAT gateway, it appears as a new mapping request.

   This self-healing property of the protocol is very important.

   The remarkable reliability of the Internet as a whole derives in
   large part from the fact that important state is held in the
   endpoints, not in the network itself [ETEAISD].  Power-cycling an
   Ethernet switch results only in a brief interruption in the flow of
   packets; established TCP connections through that switch are not
   broken, merely delayed for a few seconds.  Indeed, a failing Ethernet
   switch can even be replaced with a new one, and as long as the cables
   are transferred over reasonably quickly, after the upgrade all the
   TCP connections that were previously going through the old switch
   will be unbroken and now going through the new one.  The same is true
   of IP routers, wireless base stations, etc.  The one exception is NAT
   gateways.  Because the port mapping state is required for the NAT
   gateway to know where to forward inbound packets, loss of that state
   breaks connectivity through the NAT gateway.  By allowing clients to
   detect when this loss of NAT gateway state has occurred, and recreate
   it on demand, we turn hard state in the network into soft state, and
   allow it to be recovered automatically when needed.

   Without this automatic recreation of soft state in the NAT gateway,
   reliable long-term networking would not be achieved.  As mentioned
   above, the reliability of the Internet does not come from trying to
   build a perfect network in which errors never happen, but from
   accepting that in any sufficiently large system there will always be
   some component somewhere that's failing, and designing mechanisms
   that can handle those failures and recover.  To illustrate this point
   with an example, consider the following scenario: Imagine a network
   security camera that has a web interface and accepts incoming
   connections from web browser clients.  Imagine this network security
   camera uses NAT-PMP or a similar protocol to set up an inbound port
   mapping in the NAT gateway so that it can receive incoming
   connections from clients on the other side of the NAT gateway.  Now,
   this camera may well operate for weeks, months, or even years.
   During that time, it's possible that the NAT gateway could experience
   a power failure or be rebooted.  The user could upgrade the NAT
   gateway's firmware, or even replace the entire NAT gateway device
   with a newer model.  The general point is that if the camera operates
   for a long enough period of time, some kind of disruption to the NAT
   gateway becomes inevitable.  The question is not whether the NAT
   gateway will lose its port mappings, but when, and how often.  If the
   network camera and devices like it on the network can detect when the
   NAT gateway has lost its port mappings, and recreate them
   automatically, then these disruptions are self-correcting and largely
   invisible to the end user.  If, on the other hand, the disruptions
   are not self-correcting, and after a NAT gateway reboot the user has
   to manually reset or reboot all the other devices on the network too,
   then these disruptions are *very* visible to the end user.  This
   aspect of the design is part of what makes the difference between a
   protocol that keeps on working indefinitely over a time scale of
   months or years, and a protocol that works in brief testing, but in
   the real world is continually failing and requiring manual
   intervention to get it going again.

   When a client renews its port mappings as the result of receiving a
   packet where the Seconds Since Start of Epoch (SSSoE) field indicates
   that a reboot or similar loss of state has occurred, the client MUST
   first delay by a random amount of time selected with uniform random
   distribution in the range 0 to 5 seconds, and then send its first
   port mapping request.  After that request is acknowledged by the
   gateway, the client may then send its second request, and so on, as
   rapidly as the gateway allows.  The requests SHOULD be issued
   serially, one at a time; the client SHOULD NOT issue multiple
   concurrent requests.

   The discussion in this section focuses on recreating inbound port
   mappings after loss of NAT gateway state, because that is the more
   serious problem.  Losing port mappings for outgoing connections
   destroys those currently active connections, but does not prevent
   clients from establishing new outgoing connections.  In contrast,
   losing inbound port mappings not only destroys all existing inbound
   connections, but also prevents the reception of any new inbound
   connections until the port mapping is recreated.  Accordingly, we
   consider recovery of inbound port mappings more important.  However,
   clients that want outgoing connections to survive a NAT gateway
   reboot can also achieve that using NAT-PMP, in the common case of a
   residential NAT gateway with a single, relatively stable, external IP
   address.  After initiating an outbound TCP connection (which will
   cause the NAT gateway to establish an implicit port mapping), the
   client should send the NAT gateway a port mapping request for the
   source port of its TCP connection, which will cause the NAT gateway
   to send a response giving the external port it allocated for that
   mapping.  The client can then store this information, and use it
   later to recreate the mapping if it determines that the NAT gateway
   has lost its mapping state.

3.8.  NAT Gateways with NAT Function Disabled

   Note that only devices that are *currently* acting in the role of NAT
   gateway should participate in NAT-PMP protocol exchanges with
   clients.  A network device that is capable of NAT (and NAT-PMP) but
   is currently configured not to perform that function (e.g., it is
   acting as a traditional IP router, forwarding packets without
   modifying them) MUST NOT respond to NAT-PMP requests from clients nor
   send spontaneous NAT-PMP address-change announcements.

   In particular, a network device not currently acting in the role of
   NAT gateway should not even respond to NAT-PMP requests by returning
   an error code such as 2, "Not Authorized/Refused", since to do so is
   misleading to clients -- it suggests that NAT port mapping is
   necessary on this network for the client to successfully receive
   inbound connections, but is not available because the administrator
   has chosen to disable that functionality.

   Clients should also be careful to avoid making unfounded assumptions,
   such as the assumption that if the client has an IPv4 address in one
   of the private IPv4 address ranges [RFC1918], then that means NAT
   necessarily must be in use.  Net 10/8 has enough addresses to build a
   private network with millions of hosts and thousands of
   interconnected subnets, all without any use of NAT.  Many
   organizations have built such private networks that benefit from
   using standard TCP/IP technology, but by choice do not connect to the
   public Internet.  The purpose of NAT-PMP is to mitigate some of the
   damage caused by NAT.  It would be an ironic and unwanted side effect
   of this protocol if it were to lead well-meaning but misguided
   developers to create products that refuse to work on a private
   network *unless* they can find a NAT gateway to talk to.
   Consequently, a client finding that NAT-PMP is not available on its
   network should not give up, but should proceed on the assumption that
   the network may be a traditional routed IP network, with no address
   translation being used.  This assumption may not always be true, but
   it is better than the alternative of falsely assuming the worst and
   not even trying to use normal (non-NAT) IP networking.

   If a network device not currently acting in the role of NAT gateway
   receives UDP packets addressed to port 5351, it SHOULD respond
   immediately with an "ICMP Port Unreachable" message to tell the
   client that it needn't continue with timeouts and retransmissions,
   and it should assume that NAT-PMP is not available and not needed on
   this network.  Typically, this behavior can be achieved merely by not
   having an open socket listening on UDP port 5351.

3.9.  All Mappings Are Bidirectional

   All NAT mappings, whether created implicitly by an outbound packet,
   created explicitly using NAT-PMP, or configured statically, are
   bidirectional.  This means that when an outbound packet from a
   particular internal address and port is translated to an external
   address and port, replies addressed to that external address and port
   need to be translated back to the corresponding internal address and
   port.

   The converse is also true.  When an inbound packet is received that
   is addressed to an external address and port that matches an existing
   mapping (implicit, explicit, or static), it is translated to the
   corresponding internal address and port and forwarded.  Outbound
   replies from that internal address and port need to be translated to
   the correct external address and port so that they are correctly
   recognized by the remote peer.

   In particular, if an outbound UDP reply that matches an existing
   explicit or static mapping is instead treated like a "new" outbound
   UDP packet, and a new dynamic mapping is created (with a different
   external address and port), then at the time that packet arrives at
   the remote peer it will not be recognized as a valid reply.  For TCP
   this bug is quickly spotted because all TCP implementations will
   ignore replies with the wrong apparent source address and port.  For
   UDP this bug can more easily go unnoticed because some UDP clients
   neglect to check the source address and port of replies; thus, they
   will appear to work some of the time with NAT gateways that put the
   wrong source address and port in outbound packets.  All NAT gateways
   MUST ensure that mappings, however created, are bidirectional.

4.  UNSAF Considerations

   The document "IAB Considerations for UNilateral Self-Address Fixing
   (UNSAF) Across Network Address Translation (NAT)" [RFC3424] covers a
   number of issues when working with NATs.  It outlines some
   requirements for any document that attempts to work around problems
   associated with NATs.  This section addresses those requirements.

4.1.  Scope

   This protocol addresses the needs of TCP and UDP transport peers that
   are separated from the public Internet by exactly one IPv4 NAT.  Such
   peers must have access to some form of directory server for
   registering the public IPv4 address and port at which they can be
   reached.

4.2.  Transition Plan

   Any client making use of this protocol SHOULD implement IPv6 support.
   If a client supports IPv6 and is running on a device with a global
   IPv6 address, that IPv6 address SHOULD be preferred to the IPv4
   external address learned via this NAT mapping protocol.  In case
   other clients do not have IPv6 connectivity, both the IPv4 and IPv6
   addresses SHOULD be registered with whatever form of directory server
   is used.  Preference SHOULD be given to IPv6 addresses when
   available.  By implementing support for IPv6 and using this protocol
   for IPv4, vendors can ship products today that will work under both
   scenarios.  As IPv6 becomes more widely deployed, clients of this
   protocol following these recommendations will transparently make use
   of IPv6.

4.3.  Failure Cases

   Aside from NATs that do not implement this protocol, there are a
   number of situations where this protocol may not work.

4.3.1.  NAT behind NAT

   Some people's primary IPv4 address, assigned by their ISP, may itself
   be a NAT address.  In addition, some people may have an external IPv4
   address, but may then double NAT themselves, perhaps by choice or
   perhaps by accident.  Although it might be possible in principle for
   one NAT gateway to recursively request a mapping from the next one,
   this document does not advocate that and does not try to prescribe
   how it would be done.

   It would be a lot of work to implement nested NAT port mapping
   correctly, and there are a number of reasons why the end result might
   not be as useful as we might hope.  Consider the case of an ISP that
   offers each of its customers only a single NAT address.  This ISP
   could instead have chosen to provide each customer with a single
   public IPv4 address, or, if the ISP insists on running NAT, it could
   have chosen to allow each customer a reasonable number of addresses,
   enough for each customer device to have its own NAT address directly
   from the ISP.  If, instead, this ISP chooses to allow each customer
   just one and only one NAT address, forcing said customer to run
   nested NAT in order to use more than one device, it seems unlikely
   that such an ISP would be so obliging as to provide a NAT service
   that supports NAT-PMP.  Supposing that such an ISP did wish to offer
   its customers NAT service with NAT-PMP so as to give them the ability
   to receive inbound connections, this ISP could easily choose to allow
   each client to request a reasonable number of DHCP addresses from
   that gateway.  Remember that Net 10/8 [RFC1918] allows for over 16
   million addresses, so NAT addresses are not in any way in short
   supply.  A single NAT gateway with 16 million available addresses is
   likely to run out of packet forwarding capacity before it runs out of
   internal addresses to hand out.  In this way, the ISP could offer
   single-level NAT with NAT-PMP, obviating the need to support nested
   NAT-PMP.  In addition, an ISP that is motivated to provide their
   customers with unhindered access to the Internet by allowing incoming
   as well as outgoing connections has better ways to offer this
   service.  Such an ISP could offer its customers real public IPv4
   addresses instead of NAT addresses, or could choose to offer its
   customers full IPv6 connectivity, where no mapping or translation is
   required at all.

   Note: In the nine years since NAT-PMP was designed, the pool of
   available IPv4 addresses has been exhausted, and many ISPs now offer
   translated IPv4 addresses out of necessity.  Such ISPs have indicated
   a willingness to offer PCP service to their customers.

4.3.2.  NATs with Multiple External IPv4 Addresses

   If a NAT maps internal addresses to multiple external addresses, then
   it SHOULD pick one of those external addresses as the one it will
   support for inbound connections, and for the purposes of this
   protocol it SHOULD act as if that address were its only address.

4.3.3.  NATs and Routed Private Networks

   In some cases, a large network may be subnetted.  Some sites may
   install a NAT gateway and subnet the private network.  Such
   subnetting breaks this protocol because the router address is not
   necessarily the address of the device performing NAT.

   Addressing this problem is not a high priority.  Any site with the
   resources to set up such a configuration should have the resources to
   add manual mappings or attain a range of globally unique addresses.

   Not all NATs will support this protocol.  In the case where a client
   is run behind a NAT that does not support this protocol, the software
   relying on the functionality of this protocol may be unusable.

4.3.4.  Communication between Hosts behind the Same NAT

   NAT gateways supporting NAT-PMP should also implement "hairpin
   translation".  Hairpin translation means supporting communication
   between two local clients being served by the same NAT gateway.

   Suppose device A is listening on internal address and port
   10.0.0.2:80 for incoming connections.  Using NAT-PMP, device A has
   obtained a mapping to external address and port x.x.x.x:80, and has
   recorded this external address and port in a public directory of some
   kind.  For example, it could have created a DNS SRV record containing
   this information, and recorded it, using DNS Dynamic Update
   [RFC3007], in a publicly accessible DNS server.  Suppose then that
   device B, behind the same NAT gateway as device A, but unknowing or
   uncaring of this fact, retrieves device A's DNS SRV record and
   attempts to open a TCP connection to x.x.x.x:80.  The outgoing
   packets addressed to this public Internet address will be sent to the
   NAT gateway for translation and forwarding.  Having translated the
   source address and port number on the outgoing packet, the NAT
   gateway needs to be smart enough to recognize that the destination
   address is in fact itself, and then feed this packet back into its
   packet reception engine, to perform the destination port mapping
   lookup to translate and forward this packet to device A at address
   and port 10.0.0.2:80.

4.3.5.  Non-UDP/TCP Transport Traffic

   Any communication over transport protocols other than TCP and UDP
   will not be served by this protocol.  Examples are Generic Routing
   Encapsulation (GRE), Authentication Header (AH), and Encapsulating
   Security Payload (ESP).

4.4.  Long-Term Solution

   As IPv6 is deployed, clients of this protocol supporting IPv6 will be
   able to bypass this protocol and the NAT when communicating with
   other IPv6 devices.  In order to ensure this transition, any client
   implementing this protocol SHOULD also implement IPv6 and use this
   solution only when IPv6 is not available to both peers.

4.5.  Existing Deployed NATs

   Existing deployed NATs will not support this protocol.  This protocol
   will only work with NATs that are upgraded to support it.

5.  Security Considerations

   As discussed in Section 3.2, "Determining the External Address", only
   a client on the internal side of the NAT may create port mappings,
   and it may do so only on its own behalf.  By using IP address
   spoofing, it's possible for one client to delete the port mappings of
   another client.  It's also possible for one client to create port
   mappings on behalf of another client.  In cases where this is a
   concern, it can be dealt with using IPsec [RFC4301].

   The multicast announcements described in Section 3.2.1, "Announcing
   Address Changes", could be spoofed, facilitating a denial-of-service
   attack.  This makes NAT-PMP unsuitable for use on LANs with large
   numbers of hosts where one or more of the hosts may be untrustworthy.

   Another concern is that rogue software running on a local host could
   create port mappings for unsuspecting hosts, thereby rendering them
   vulnerable to external attack.  However, it's not clear how realistic
   this threat model is, since rogue software on a local host could
   attack such unsuspecting hosts directly itself, without resorting to
   such a convoluted indirect technique.  This concern is also a little
   misguided because it is based on the assumption that a NAT gateway
   and a firewall are the same thing, which they are not.

   Some people view the property of NATs blocking inbound connections as
   a security benefit that is undermined by this protocol.  The authors
   of this document have a different point of view.  In the days before
   NAT became prevalent, all hosts had unique public IP addresses, and
   had unhindered ability to communicate with any other host on the
   Internet (a configuration that is still surprisingly common).  Using
   NAT breaks this unhindered connectivity, relegating hosts to second-
   class status, unable to receive inbound connections.  This protocol
   goes some way to partially reverse that damage.  The purpose of a NAT
   gateway should be to allow several hosts to share a single address,
   not to simultaneously impede those host's ability to communicate
   freely.  Security is most properly provided by end-to-end
   cryptographic security, and/or by explicit firewall functionality, as
   appropriate.  Blocking of certain connections should occur only as a
   result of explicit and intentional firewall policy, not as an
   accidental side effect of some other technology.

   However, since many users do have an expectation that their NAT
   gateways can function as a kind of firewall, any NAT gateway
   implementing this protocol SHOULD have an administrative mechanism to
   disable it, thereby restoring the pre-NAT-PMP behavior.

6.  IANA Considerations

   UDP ports 5350 and 5351 have been assigned for use by NAT-PMP, and
   subsequently by its successor, Port Control Protocol [RFC6887].

   No further IANA services are required by this document.

7.  Acknowledgments

   The concepts described in this document have been explored,
   developed, and implemented with help from Mark Baugher, Bob Bradley,
   Josh Graessley, Rory McGuire, Rob Newberry, Roger Pantos, John
   Saxton, Kiren Sekar, Jessica Vazquez, and James Woodyatt.

   Special credit goes to Mike Bell, the Apple Vice President who
   recognized the need for a clean, elegant, reliable Port Mapping
   Protocol, and made the decision early on that Apple's AirPort base
   stations would support NAT-PMP.

8.  Deployment History

   In August 2004, NAT-PMP client software first became available to the
   public through Apple's Darwin Open Source code.  In April 2005,
   NAT-PMP implementations began shipping to end users with the launch
   of Mac OS X 10.4 Tiger and Bonjour for Windows 1.0, and in June 2005
   the protocol was first publicly documented in the original draft
   version of this document.

   The NAT-PMP client in Mac OS X 10.4 Tiger and Bonjour for Windows
   exists as part of the mDNSResponder/mdnsd system service.  When a
   client advertises a service using Wide Area Bonjour [RFC6763], and
   the machine is behind a NAT-PMP-capable NAT gateway, and the machine
   is so configured, the mDNSResponder system service automatically uses
   NAT-PMP to set up an inbound port mapping, and then records the
   external IPv4 address and port in the global DNS.  Existing client
   software using the Bonjour programming APIs [Bonjour] got this new
   NAT traversal functionality automatically.  The logic behind this
   decision was that if client software publishes its information into
   the global DNS via Wide Area Bonjour service advertising, then it's
   reasonable to infer an expectation that this information should
   actually be usable by the peers retrieving it.  Generally speaking,
   recording a private IPv4 address like 10.0.0.2 in the public DNS is
   likely to be pointless because that address is not reachable from
   clients on the other side of the NAT gateway.  In the case of a home
   user with a single computer directly connected to their Cable or DSL
   modem, with a single global IPv4 address and no NAT gateway (a common
   configuration at that time), publishing the machine's global IPv4
   address into the global DNS is useful, because that IPv4 address is
   globally reachable.  In contrast, a home user using a NAT gateway to
   share a single global IPv4 address between several computers loses
   this ability to receive inbound connections.  This breaks many peer-
   to-peer collaborative applications, like the multi-user text editor
   SubEthaEdit [SEE].  For many users, moving from one computer with a
   global IPv4 address, to two computers using NAT to share a single
   global IPv4 address, loss of inbound reachability was an unwanted
   side effect of using NAT for address sharing.  Automatically creating
   the necessary inbound port mappings helped remedy this unwanted side
   effect of NAT.

   The server side of the NAT-PMP protocol is implemented in Apple's
   AirPort Extreme, AirPort Express, and Time Capsule wireless base
   stations, and in the Internet Sharing feature of Mac OS X 10.4 and
   later.  Some third-party NAT vendors, such as Peplink, also offer
   NAT-PMP in their products.

   In Mac OS X 10.4 Tiger, the NAT-PMP client was invoked automatically
   as a side effect of clients requesting Wide Area Bonjour service
   registrations.  Using NAT-PMP without an associated Wide Area Bonjour
   service registration required use of a third-party client library.

   In October 2007, Mac OS X 10.5 Leopard added the "DNSServiceNATPort-
   MappingCreate" API, which made NAT-PMP client functionality directly
   available, so software could use it with other directory and
   rendezvous mechanisms in addition to Wide Area Bonjour DNS Updates.

   In 2013, NAT-PMP was superseded by the IETF Standards Track Port
   Control Protocol [RFC6887].  PCP builds on NAT-PMP and uses a
   compatible packet format, and adds a number of significant
   enhancements, including IPv6 support, management of outbound
   mappings, management of firewall rules, full compatibility with
   large-scale NATs with a pool of external addresses, error lifetimes,
   and an extension mechanism to enable future enhancements.

9.  Noteworthy Features of NAT Port Mapping Protocol and PCP

   Some readers have asked how NAT-PMP and PCP compare to other similar
   solutions, particularly the UPnP Forum's Internet Gateway Device
   (IGD) Device Control Protocol [IGD].

   The answer is that although the Universal Plug and Play (UPnP) IGD
   protocol is often used as a way for client devices to create port
   mappings programmatically, it's not ideal for that task.  Whereas
   NAT-PMP was explicitly designed to be used primarily by software
   entities managing their own port mappings, UPnP IGD is more tailored
   towards being used by humans configuring all the settings of their
   gateway using some GUI tool.  This difference in emphasis leads to
   protocol differences.  For example, while it is reasonable and
   sensible to require software entities to renew their mappings
   periodically to prove that they are still there (like a device
   renewing its DHCP address lease), it would be unreasonable to require
   the same thing of a human user.  When a human user configures their
   gateway, they expect it to stay configured that way until they decide
   to change it.  If they configure a port mapping, they expect it to
   stay configured until they decide to delete it.

   Because of this focus on being a general administration protocol for
   all aspects of home gateway configuration, UPnP IGD is a large and
   complicated collection of protocols (360 pages of specification
   spread over 13 separate documents, not counting supporting protocol
   specifications like Simple Service Discovery Protocol (SSDP) and
   Extensible Markup Language (XML)).  While it may be a fine way for
   human users to configure their home gateways, it is not especially
   suited to the task of programmatically creating dynamic port
   mappings.

   The requirements for a good port mapping protocol, requirements that
   are met by NAT-PMP, are outlined below.

9.1.  Simplicity

   Many home gateways, and many of the devices that connect to them, are
   small, low-cost devices, with limited RAM, flash memory, and CPU
   resources.  Protocols they use should be considerate of this,
   supporting a small number of simple operations that can be
   implemented easily with a small amount of code.  A quick comparison,
   based on page count of the respective documents alone, suggests that
   NAT-PMP is at least ten times simpler than UPnP IGD.

9.2.  Focused Scope

   The more things a protocol can do, the more chance there is that
   something it does could be exploited for malicious purposes.  NAT-PMP
   is tightly focused on the specific task of creating port mappings.
   Were the protocol to be misused in some way, this helps limit the
   scope of what mischief could be performed using the protocol.

   Because UPnP IGD allows control over all home gateway configuration
   settings, the potential for mischief is far greater.  For example, a
   UPnP IGD home gateway allows messages that tell it to change the DNS
   server addresses that it sends to clients in its DHCP packets.  Using
   this mechanism, a single item of malicious web content (e.g., a rogue
   Flash banner advert on a web page) can make a persistent change to
   the home gateway's configuration without the user's knowledge, such
   that all future DNS requests by all local clients will be sent to a
   rogue DNS server.  This allows criminals to perform a variety of
   mischief, such as hijacking connections to bank web sites and
   redirecting them to the criminals' web servers instead [VU347812].

9.3.  Efficiency

   In addition to low-cost home gateways, many of the clients will also
   be similarly constrained low-cost devices with limited RAM resources.

   When implementing a NAT-PMP client on a constrained device, it's
   beneficial to have well-defined bounds on RAM requirements that are
   fixed and known in advance.  For example, when requesting the
   gateway's external IPv4 address, a NAT-PMP client on Ethernet knows
   that to receive the reply it will require 14 bytes for the Ethernet
   header, 20 bytes for the IPv4 header, 8 bytes for the UDP header, and
   12 bytes for the NAT-PMP payload, making a total of 54 bytes.

   In contrast, UPnP IGD uses an XML reply of unbounded size.  It is not
   uncommon for a UPnP IGD device to return an XML document 4000 to 8000
   bytes in size to communicate its 4-byte external IPv4 address, and
   the protocol specification places no upper bound on how large the XML
   response may be, so there's nothing to stop the reply being even
   larger.  This means that developers of UPnP client devices can only
   guess at how much memory they may need to receive the XML reply.
   Operational experience suggests that 10,000 bytes is usually enough
   for most UPnP IGD home gateways today, but that's no guarantee that
   some future UPnP IGD home gateway might not return a perfectly legal
   XML reply much larger than that.

   In addition, because the XML reply is too large to fit in a single
   UDP packet, UPnP IGD has to use a TCP connection, thereby adding the
   overhead of TCP connection setup and teardown.

   The process of discovering a UPnP IGD home gateway's external IPv4
   address consists of:

   o SSDP transaction to discover the TCP port to use, and the "URL" of
     the XML document to fetch from the gateway.  Following the SSDP
     specification, this is 3 multicast requests, eliciting 9 unicast
     responses.

   o HTTP "GET" request to get the device description.  Typically, 16
     packets: 3 for TCP connection setup, 9 packets of data exchange,
     and a 4-packet FIN-ACK-FIN-ACK sequence to close the connection.

   o HTTP "POST" to request the external IPv4 address.  Typically, 14
     packets: 3 for TCP connection setup, 7 packets of data exchange,
     and a 4-packet FIN-ACK-FIN-ACK sequence to close the connection.

   To retrieve the external IPv4 address NAT-PMP takes a 2-packet UDP
   exchange (44-byte request, 54-byte response); the same thing using
   UPnP IGD takes 42 packets and thousands of bytes.

   Similarly, UPnP IGD's HTTP "POST" request for a port mapping is
   typically a 14-packet exchange, compared with NAT-PMP's 2-packet UDP
   exchange.

9.4.  Atomic Allocation Operations

   Some of the useful properties of NAT-PMP were inspired by DHCP, a
   reliable and successful protocol.  For example, DHCP allows a client
   to request a desired IP address, but if that address is already in
   use the DHCP server will instead assign some other available address.

   Correspondingly, NAT-PMP allows a client to request a desired
   external port, and if that external port is already in use by some
   other client, the NAT-PMP server will instead assign some other
   available external port.

   UPnP IGD does not do this.  If a UPnP IGD client requests an external
   port that has already been allocated, then one of two things happens.

   Some UPnP IGD home gateways just silently overwrite the old mapping
   with the new one, causing the previous client to lose connectivity.
   If the previous client renews its port mapping, then it in turn
   overwrites the new mapping, and the two clients fight over the same
   external port indefinitely, neither achieving reliable connectivity.

   Other IGD home gateways return a "Conflict" error if the port is
   already in use, which does at least tell the client what happened,
   but doesn't tell the client what to do.  Instead of the NAT gateway
   (which does know which ports are available) assigning one to the
   client, the NAT gateway makes the client (which doesn't know) keep
   guessing until it gets lucky.  This problem remains mild as long as
   not many clients are using UPnP IGD, but gets progressively worse as
   the number of clients on the network requesting port mappings goes
   up.  In addition, UPnP IGD works particularly badly in conjunction
   with the emerging policy of allocating pre-assigned port ranges to
   each client.  If a client is assigned TCP port range 63488-64511, and
   the UPnP IGD client requests TCP port 80, trying successive
   incrementing ports until it succeeds, then the UPnP IGD client will
   have to issue 63,409 requests before it succeeds.

9.5.  Garbage Collection

   In any system that operates for a long period of time (as a home
   gateway should), it is important that garbage data does not
   accumulate indefinitely until the system runs out of memory and
   fails.

   Similar to how DHCP leases an IP address to a client for a finite
   length of time, NAT-PMP leases an external port to a client for a
   finite length of time.  The NAT-PMP client must renew the port
   mapping before it expires, or, like an unrenewed DHCP address, it
   will be reclaimed.  If a laptop computer is abruptly disconnected
   from the network without the opportunity to delete its port mappings,
   the NAT gateway will reclaim those mappings when they are not
   renewed.

   In principle, UPnP IGD should allow clients to specify a lifetime on
   port mappings.  However, a Google search for "UPnP NewLeaseDuration"
   shows that in practice pretty much every client uses
   "<NewLeaseDuration>0</NewLeaseDuration>" to request an infinite
   lease, and the protocol has no way for the NAT gateway to decline
   that infinite lease request and require the client to renew it at
   reasonable intervals.  Furthermore, anecdotal evidence is that if the
   client requests a lease other than zero, there are IGD home gateways
   that will ignore the request, fail in other ways, or even crash
   completely.  As a client implementer then, you would be well advised
   not to attempt to request a lease other than zero, unless you want to
   suffer the support costs and bad publicity of lots of people
   complaining that your device brought down their entire network.

   Because none of the early UPnP IGD clients requested port mapping
   leases, many UPnP IGD home gateway vendors never tested that
   functionality, and got away with shipping home gateways where that
   functionality was buggy or nonexistent.  Because there are so many
   buggy UPnP IGD home gateways already deployed, client writers wisely
   stick to the well-trodden path of only requesting infinite leases.
   Because there are now few (if any) clients attempting to request non-
   zero leases, home gateway vendors have little incentive to expend
   resources implementing a feature no one uses.

   This unfortunate consequence of the way UPnP IGD was developed and
   deployed means that in practice it has no usable port mapping lease
   facility today, and therefore when run for a long period of time UPnP
   IGD home gateways have no good way to avoid accumulating an unbounded
   number of stale port mappings.

9.6.  State Change Announcements

   When using DHCP on the external interface, as is the norm for home
   gateways, there is no guarantee that a UPnP IGD home gateway's
   external IPv4 address will remain unchanged.  Indeed, some ISPs
   change their customer's IPv4 address every 24 hours (possibly in an
   effort to make it harder for their customers to "run a server" at
   home).  What this means is that if the home gateway's external IPv4
   address changes, it needs to inform its clients, so that they can
   make any necessary updates to global directory information (e.g.,
   performing a Dynamic DNS update to update their address record).

   When a NAT-PMP gateway's external IPv4 address changes, it broadcasts
   announcement packets to inform clients of this.  UPnP IGD does not.

9.7.  Soft State Recovery

   When run for a long enough period of time, any network will have
   devices that fail, get rebooted, suffer power outages, or lose state
   for other reasons.  A home gateway that runs for long enough is
   likely to suffer some such incident eventually.  After losing state,
   it has no record of the port mappings it created, and clients suffer
   a consequent loss of connectivity.

   To handle this case, NAT-PMP has the "Seconds Since Start of Epoch"
   mechanism.  After a reboot or other loss of state, a NAT-PMP gateway
   broadcasts announcement packets giving its external IPv4 address,
   with the Seconds Since Start of Epoch field reset to begin counting
   from zero again.  When a NAT-PMP client observes packets from its
   NAT-PMP gateway where the gateway's notion of time has apparently
   gone backwards compared to the client's, the client knows the gateway
   has probably lost state, and immediately recreates its mappings to
   restore connectivity.

   UPnP IGD has no equivalent mechanism.

9.8.  On-Path NAT Discovery

   For any given host, it is only useful to request NAT port mappings in
   the NAT gateway through which that host's packets are flowing.  A NAT
   port mapping is a request for packets to be translated in a certain
   way; the NAT gateway can only perform that translation if it's
   actually forwarding inbound and outbound packets for that host.

   This is why NAT-PMP sends its requests to the host's default router,
   since this is the device that is forwarding (and possibly
   translating) inbound and outbound packets for that host.  (In a
   larger network with multiple hops between a host and its NAT gateway,
   some other mechanism would need to be used to discover the correct
   on-path NAT for a host; this is possible, but outside the scope of
   this document.)

   In contrast, UPnP IGD does not limit itself to using only on-path
   NATs.  UPnP IGD uses a multicast SSDP query, and uses any device it
   finds on the local network claiming UPnP IGD capability, regardless
   of whether any inbound or outbound traffic is actually flowing
   through that device.  Over the past few years this led to many bug
   reports being sent to Apple with the general form: "Port Mapping
   doesn't work on my Mac and that's a bug because everything else on my
   network says UPnP IGD is working fine." Upon investigation it always
   turned out that: (i) these people had NAT gateways that either didn't
   support port mapping requests, or had that capability disabled, and
   (ii) for some reason they also had some other old NAT device still
   connected to their network, and those other NAT devices were
   advertising UPnP IGD capability, even though they were not the active
   NAT gateway for the network.  This led to UPnP IGD clients falsely
   reporting that they were "working fine", and only the Mac correctly
   reporting that it was unable to make any useful port mappings.  In
   many cases the people reporting this "bug" had devices like game
   consoles on their home network that for many years had been reporting
   that UPnP IGD was "working fine", yet during those years they had
   never once successfully received any inbound network packet or
   connection.  The irony is that, for these people who were reporting
   bugs to Apple, UPnP IGD "working fine" had been indistinguishable
   from UPnP IGD doing nothing useful at all.  It was only when Back to
   My Mac [RFC6281] started reporting that it was unable to make any
   functional port mappings that these people discovered they'd never
   had any working port mappings on their NAT gateway.

10.  References

10.1.  Normative References

   [RFC1918]  Rekhter, Y., Moskowitz, B., Karrenberg, D., de Groot, G.,
              and E. Lear, "Address Allocation for Private Internets",
              BCP 5, RFC 1918, February 1996.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

10.2.  Informative References

   [Bonjour]  Apple "Bonjour" <http://developer.apple.com/bonjour/>.

   [ETEAISD]  J. Saltzer, D. Reed and D. Clark: "End-to-end arguments in
              system design", ACM Trans. Comp. Sys., 2(4):277-88,
              November 1984.

   [IGD]      UPnP Standards "Internet Gateway Device (IGD) Standardized
              Device Control Protocol V 1.0", November 2001,
              <http://www.upnp.org/standardizeddcps/igd.asp>.

   [RFC2131]  Droms, R., "Dynamic Host Configuration Protocol", RFC
              2131, March 1997.

   [RFC2663]  Srisuresh, P. and M. Holdrege, "IP Network Address
              Translator (NAT) Terminology and Considerations", RFC
              2663, August 1999.

   [RFC3007]  Wellington, B., "Secure Domain Name System (DNS) Dynamic
              Update", RFC 3007, November 2000.

   [RFC3022]  Srisuresh, P. and K. Egevang, "Traditional IP Network
              Address Translator (Traditional NAT)", RFC 3022, January
              2001.

   [RFC3424]  Daigle, L., Ed., and IAB, "IAB Considerations for
              UNilateral Self-Address Fixing (UNSAF) Across Network
              Address Translation", RFC 3424, November 2002.

   [RFC4301]  Kent, S. and K. Seo, "Security Architecture for the
              Internet Protocol", RFC 4301, December 2005.

   [RFC6281]  Cheshire, S., Zhu, Z., Wakikawa, R., and L. Zhang,
              "Understanding Apple's Back to My Mac (BTMM) Service", RFC
              6281, June 2011.

   [RFC6763]  Cheshire, S. and M. Krochmal, "DNS-Based Service
              Discovery", RFC 6763, February 2013.

   [RFC6887]  Wing, D., Ed., Cheshire, S., Boucadair, M., Penno, R., and
              P. Selkirk, "Port Control Protocol (PCP)", RFC 6887, April
              2013.

   [SEE]      SubEthaEdit, <http://www.codingmonkeys.de/subethaedit/>.

   [VU347812] United States Computer Emergency Readiness Team
              Vulnerability Note VU#347812,
              <http://www.kb.cert.org/vuls/id/347812>.

Authors' Addresses

   Stuart Cheshire
   Apple Inc.
   1 Infinite Loop
   Cupertino, CA 95014
   USA

   EMail: cheshire@apple.com

   Marc Krochmal
   Apple Inc.
   1 Infinite Loop
   Cupertino, CA 95014
   USA

   EMail: marc@apple.com