Network Working Group                                       P. Srisuresh
Request for Comments: 5128                                Kazeon Systems
Category: Informational                                          B. Ford
                                                                  M.I.T.
                                                                D. Kegel
                                                               kegel.com
                                                              March 2008


         네트워크 주소 변환기(NAT)를 통한 P2P(Peer-to-Peer) 통신의 상태

Status of This Memo

   이 메모는 인터넷 커뮤니티에 대한 정보를 제공합니다. 어떤 종류의 인터넷 표준도 지정하지
   않습니다. 메모 배포에 제한은 없습니다.

개요

   이 메모는 현재 네트워크 주소 변환기(NAT)가 있는 상태에서 직접 통신을 설정하기 위해 응용
   프로그램에서 사용 중인 것으로 알려진 다양한 방법을 문서화합니다. 이 메모는 주로 설명을 위한
   것이지만 보안 고려 사항 섹션에서는 설명된 방법을 사용할 때 응용 프로그램이 실수로 생성할 수
   있는 보안 취약점을 처리하는 방법에 대한 순전히 권고 사항을 제공합니다. 이 메모는 TCP 및
   UDP 기반 애플리케이션에서 사용되는 NAT 순회 접근 방식을 다룹니다. 이 메모는 설명된 방법을
   보증하는 것이 아니라 문서에서 캡처하려는 시도일 뿐입니다.

목차

   1. Introduction and Scope (소개 및 범위)
   2. Terminology and Conventions Used (사용된 용어 및 규약)
      2.1. Endpoint
      2.2. Endpoint Mapping
      2.3. Endpoint-Independent Mapping
      2.4. Endpoint-Dependent Mapping
      2.5. Endpoint-Independent Filtering
      2.6. Endpoint-Dependent Filtering
      2.7. P2P Application
      2.8. NAT-Friendly P2P Application
      2.9. Endpoint-Independent Mapping NAT (EIM-NAT)
      2.10. Hairpinning
   3. Techniques Used by P2P Applications to Traverse NATs (NAT 통과를 위해 P2P 애플리케이션에서 사용하는 기술)
      3.1. Relaying (중계))
      3.2. Connection Reversal
      3.3. UDP Hole Punching
           3.3.1. Peers behind Different NATs (다른 NAT 뒤의 피어)
           3.3.2. Peers behind the Same NAT (동일한 NAT 뒤에 있는 피어)
           3.3.3. Peers Separated by Multiple NATs (여러 NAT로 분리된 피어)
      3.4. TCP Hole Punching
      3.5. UDP Port Number Prediction (UDP 포트 번호 예측)
      3.6. TCP Port Number Prediction (TCP 포트 번호 예측)
   4. Recent Work on NAT Traversal (NAT 순회에 대한 최근 작업)
   5. Summary of Observations (관찰 요약)
      5.1. TCP/UDP Hole Punching
      5.2. NATs Employing Endpoint-Dependent Mapping
      5.3. Peer Discovery
      5.4. Hairpinning
   6. Security Considerations (보안 고려 사항)
      6.1. Lack of Authentication Can Cause Connection Hijacking (인증 부족으로 인한 커넥션 하이재킹 야기)
      6.2. Denial-of-Service Attacks
      6.3. Man-in-the-Middle Attacks
      6.4. Security Impact from EIM-NAT Devices
   7. Acknowledgments (감사의 말)
   8. References (참조)
      8.1. Normative References (규범적 참조)
      8.2. Informative References (유익한 참조)

1.  Introduction and Scope (소개 및 범위)

   오늘날의 인터넷은 네트워크 주소 변환기(NATs)의 유비쿼터스 배치를 보았습니다. 배치에서 NAT
   장치를 활용하는 다양한 NAT 장치 및 다양한 네트워크 토폴로지가 있습니다. 이러한 NAT 장치에
   의해 설정된 비대칭 주소 지정 및 연결 체계는 원격 회의 및 멀티플레이어 온라인 게임과 같은
   peer-to-peer(P2P) 애플리케이션 및 프로토콜에 고유한 문제를 발생시켰습니다. 이러한
   문제는 IPv6 세계에서도 지속될 가능성이 높습니다. IPv6으로 전환하는 동안 IPv4 전용
   노드가 IPv6 전용 노드[NAT-PT]와 통신할 수 있도록 하기 위해 일부 형태의 NAT가 필요할 수
   있습니다[NAT-PT-HIST]. 미래의 "순수한 IPv6 세계"에도 NAT와 유사한 필터링 동작을
   사용하지만 주소 변환[V6-CPE-SEC]이 없는 방화벽이 여전히 포함될 수 있습니다. 필터링 동작은
   P2P 애플리케이션의 기능을 방해합니다. 이러한 이유로 NAT 통과를 위해 이 문서에 설명된 기술을
   사용하는 IPv6 응용 프로그램은 NAT와 유사한 필터링 동작이 있는 일부 방화벽에서도 작동할 수
   있습니다.

   현재 배포된 NAT 장치는 클라이언트/서버 패러다임을 중심으로 설계되었으며, 사설 네트워크
   내부의 상대적으로 익명인 클라이언트 시스템은 안정적인 IP 주소와 DNS 이름을 사용하여 공용
   서버에 대한 연결을 시작합니다. 도중에 만나는 NAT 장치는 클라이언트 시스템에 동적 주소
   할당을 제공합니다. NAT 장치 뒤에 있는 내부 호스트의 익명성(사설 IP 주소) 및 액세스
   불가능성에 대한 환상은 나가는 연결만 시작하면 되는 웹 브라우저와 같은 응용 프로그램에서는
   문제가 되지 않습니다. 이러한 익명성과 접근 불가능성에 대한 환상은 때때로 개인 정보 보호
   혜택으로 인식됩니다. [RFC4941]의 섹션 2.2에 언급된 바와 같이, Small-Office-Home
   -Office (SOHO) NAT를 사용하는 대부분의 경우 이러한 개인 정보 보호는 환상일 수
   있습니다.

   P2P 패러다임에서 일반적으로 "클라이언트"로 간주되는 인터넷 호스트는 피어 노드에 대한 
   세션을 시작할 뿐만 아니라 피어 노드가 시작한 세션도 수락합니다. 개시자와 응답자는 영구 IP
   주소나 다른 형태의 공용 네트워크 존재를 갖지 않는 엔드포인트 없이 서로 다른 NAT 장치
   뒤에 있을 수 있습니다. 예를 들어, 일반적인 온라인 게임 아키텍처는 자신을 등록하고 피어
   호스트를 검색하기 위해 공개적으로 주소 지정이 가능한 랑데부 서버에 접속하는 모든 참여
   애플리케이션 호스트를 포함합니다. 랑데부 서버와의 통신에 이어 호스트는 게임 플레이 중에
   업데이트를 빠르고 효율적으로 전파하기 위해 서로 직접 연결을 설정합니다. 마찬가지로 파일
   공유 응용 프로그램은 리소스 검색 또는 검색을 위해 잘 알려진 랑데부 서버에 연결할 수 있지만
   데이터 전송을 위해 피어 호스트와 직접 연결을 설정할 수 있습니다. NAT 장치 뒤에 있는
   호스트는 일반적으로 다른 피어에서 들어오는 TCP 또는 UDP 연결이 향할 수 있는 인터넷에서
   영구적으로 볼 수 있는 공용 포트가 없기 때문에 NAT 장치는 피어 투 피어 연결에 문제를
   일으킵니다. RFC 3235[NAT-APPL]는 이 문제를 간략하게 설명합니다.

   [NAT-PMP], [NSIS-NSLP], [SOCKS], [RSIP], [MIDCOM] 및 [UPNP]와 같이 응용
   프로그램과 NAT 장치 간의 명시적 신호를 포함하는 NAT 통과 전략은 이 문서의 범위를
   벗어납니다. 사용 가능한 경우 이러한 기술은 문서에 설명된 기술을 보완합니다. [UNSAF]가
   범위 내에 있습니다.

   이 문서에서는 응용 프로그램이 NAT 장치를 직접 변경하지 않고 NAT 장치를 우회하여 작동하는
   현재 알려진 방법을 요약합니다. 설명된 기술은 BEHAVE 문서([BEH-UDP], [BEH-TCP] 및
   [BEH-ICMP]) 이전 버전입니다. 문서의 범위는 응용 프로그램의 끝점 간에 양방향 통신을
   설정하는 데 사용되는 현재 알려진 기술을 설명하는 것으로 제한됩니다. 실행 중인 세션과 관련된
   시간 초과, RST 처리, keepalive 등에 대한 논의는 이 문서의 범위를 벗어납니다. 또한
   범위는 TCP 및 UDP 기반 응용 프로그램에 대한 기술을 설명하는 것으로 제한됩니다. 이 문서의
   목적은 일반적인 애플리케이션[BEH-APP] 또는 특정 클래스의 애플리케이션[ICE]에 대한 NAT
   통과 문제에 대한 솔루션을 제공하는 것이 아닙니다.

2.  Terminology and Conventions Used (사용된 용어 및 규약)

   이 문서에서는 IP 주소 192.0.2.1, 192.0.2.128 및 192.0.2.254를 공용 IP 주소의
   예로 사용합니다[RFC3330]. 이러한 주소는 모두 동일한 /24 네트워크에 있지만 이는
   [RFC3330]에서 사용할 수 있는 예제 주소의 제한 사항입니다. 실제로 이러한 주소는 서로 다른
   네트워크에 있습니다. 포트 사용에 대한 표기는 모든 클라이언트가 1-2000 범위의 포트를
   사용하고 서버는 20000-21000 범위의 포트를 사용합니다. NAT 장치는 엔드포인트 매핑에 포트
   30000 이상을 사용합니다.

   NAT 분류 및 용어에 대한 정보는 [NAT-TERM]을 참조하십시오. NAT 유형이 앞에 붙거나 달리
   명시적으로 언급되지 않는 한, 이 문서 전체에서 사용되는 NAT라는 용어는 기존 NAT[NAT-
   TRAD]를 나타냅니다. 기존 NAT에는 기본 NAT와 네트워크 주소 포트 변환기(NAPT)의 두 가지
   변형이 있습니다. 이 중에서 NAPT는 가장 일반적으로 배포되는 NAT 장치입니다. NAPT를
   사용하면 여러 개인 호스트가 단일 공용 IP 주소를 동시에 공유할 수 있습니다.

   P2P 애플리케이션과 관련된 문제는 내부 호스트가 단일 끝점(사설 IP, 사설 포트)에서 외부
   네트워크의 여러 개별 끝점으로 여러 동시 세션을 시작할 때 NAT가 작동하는 방식입니다.

   [STUN]은 "Full Cone", "Restricted Cone", "Port Restricted Cone" 및
   "Symmetric"이라는 용어를 사용하여 NAT 구현을 추가로 분류합니다. 불행하게도 이 용어는
   많은 혼란의 원인이 되어 왔습니다. 이러한 이유로 이 문서는 NAT 구현을 구별하기 위해
   [BEH-UDP]의 용어를 채택합니다.

   아래 목록은 이 문서 전체에서 사용되는 용어입니다.

2.1.  Endpoint

   엔드포인트는 끝 호스트의 세션별 튜플입니다. 엔드포인트는 각 IP 프로토콜에 대해 다르게
   표시될 수 있습니다. 예를 들어 UDP 또는 TCP 세션 엔드포인트는 (IP 주소, UDP/TCP
   포트)의 튜플로 표시됩니다.

2.2.  Endpoint Mapping

   사설 영역의 호스트가 NAT 장치를 통해 공용 영역의 호스트로 나가는 세션을 시작하면 NAT 장치는
   외부 호스트의 후속 응답 패킷을 NAT에서 수신할 수 있도록 사설 엔드포인트를 변환할 공용
   엔드포인트를 할당하고, 번환되어 및 사설 endpoint로 전달됩니다. 사설 엔드포인트를 공용
   엔드포인트로 또는 그 반대로 변환하기 위한 NAT 장치의 할당을 Endpoint Mapping이라고
   합니다. NAT는 Endpoint Mapping을 사용하여 세션 기간 동안 변환을 수행합니다.

2.3.  Endpoint-Independent Mapping

   "Endpoint-Independent Mapping"은 다음과 같이 [BEH-UDP]에서 정의됩니다:

        NAT는 동일한 내부 IP 주소 및 포트(X:x)에서 외부 IP 주소 및 포트로 전송되는 후속
        패킷에 대해 포트 매핑을 재사용합니다.

2.4.  Endpoint-Dependent Mapping

   "Endpoint-Dependent Mapping"은 [BEH-UDP]에 정의된 "Address Dependent
   Mapping"와 "Address and Port-Dependent Mapping"의 조합을 나타냅니다.

   Address-Dependent Mapping

        NAT는 외부 포트에 관계없이 동일한 내부 IP 주소 및 포트(X:x)에서 동일한 외부 IP
        주소로 전송되는 후속 패킷에 대해 포트 매핑을 재사용합니다.

   Address and Port-Dependent Mapping

        NAT는 매핑이 여전히 활성 상태인 동안 동일한 내부 IP 주소 및 포트(X:x)에서 동일한
        외부 IP 주소 및 포트로 전송되는 후속 패킷에 대해 포트 매핑을 재사용합니다.

2.5.  Endpoint-Independent Filtering

   "Endpoint-Independent Filtering"은 다음과 같이 [BEH-UDP]에서 정의됩니다:

        NAT는 외부 IP 주소 및 포트 소스(Z:z)에 관계없이 내부 주소 및 포트 X:x로 향하지
        않는 패킷만 필터링합니다. NAT는 X:x로 향하는 모든 패킷을 전달합니다. 즉, NAT의
        내부에서 외부 IP 주소로 패킷을 보내는 것만으로도 모든 패킷이 내부 엔드포인트로
        되돌아가도록 허용하기에 충분합니다.

   "Endpoint-Independent Mapping"과 "Endpoint-Independent Filtering"의
   조합을 사용하는 NAT 장치는 공용 네트워크의 모든 외부 끝점에서 매핑된 공용 포트로
   들어오는 트래픽을 허용합니다.

2.6.  Endpoint-Dependent Filtering

   "Endpoint-Dependent Filtering"은 [BEH-UDP]에서 정의된 "Address Dependent
   Filtering"과 "Address and Port-Dependent Filtering"의 조합을 나타냅니다.

   Address-Dependent Filtering

        NAT는 내부 주소 X:x로 향하지 않는 패킷을 필터링합니다. 또한 NAT는 X:x가 이전에
        Y:any로 패킷을 전송하지 않은 경우 내부 끝점 X:x로 향하는 Y:y의 패킷을
        필터링합니다(Y에서 사용하는 포트와 무관). 즉, 특정 외부 종단점으로부터 패킷을
        수신하기 위해서는 내부 종단점이 특정 외부 종단점의 IP 주소로 먼저 패킷을 보내야
        합니다.

   Address and Port-Dependent Filtering

        NAT는 내부 주소 X:x로 향하지 않는 패킷을 필터링합니다. 또한 NAT는 X:x가 이전에
        Y:y로 패킷을 보내지 않은 경우 내부 엔드포인트 X:x로 향하는 Y:y의 패킷을
        필터링합니다. 즉, 특정 외부 종단점으로부터 패킷을 받기 위해서는 내부 종단점이 먼저
        그 외부 종단점의 IP 주소와 포트로 패킷을 보내야 합니다.

   "Endpoint-Dependent Filtering"을 사용하는 NAT 장치는 공용 네트워크의 제한된 외부
   끝점 집합에서 매핑된 공용 포트로 들어오는 트래픽만 허용합니다.

2.7.  P2P Application (P2P 애플리케이션)

   P2P 애플리케이션은 동일한 엔드포인트를 사용하여 피어링 호스트로 나가는 세션을 시작하고
   피어링 호스트에서 들어오는 세션을 수락하는 애플리케이션입니다. P2P 애플리케이션은 P2P
   통신을 위해 여러 엔드포인트를 사용할 수 있습니다.

2.8.  NAT-Friendly P2P Application (NAT 친화적 P2P 애플리케이션)

   NAT 친화적인 P2P 애플리케이션은 피어링 노드가 하나 이상의 NAT로 연결된 개별 IP 주소
   영역에 있는 경우에도 효과적으로 작동하도록 설계된 P2P 애플리케이션입니다.

   P2P 애플리케이션이 피어링 세션을 설정하고 NAT 친화적인 상태를 유지하는 일반적인 방법 중
   하나는 등록 및 피어 검색 목적으로 공개 주소 지정이 가능한 랑데뷰 서버를 사용하는 것입니다.

2.9. Endpoint-Independent Mapping NAT (EIM-NAT)

   Endpoint-Independent Mapping NAT (EIM-NAT)는 엔드포인트 독립 매핑을 사용하는
   NAT 장치입니다. EIM-NAT는 모든 유형의 필터링 동작을 가질 수 있습니다. BEHAVE 호환
   NAT 장치는 EIM-NAT 장치의 좋은 예입니다. 주소 종속 매핑을 사용하는 NAT 장치는
   EIM-NAT가 아닌 NAT 장치의 예입니다.

2.10.  Hairpinning

   Hairpinning은 [BEH-UDP]에서 다음과 같이 정의됩니다:

        두 호스트(X1 및 X2라고 함)가 동일한 NAT 뒤에 있고 트래픽을 교환하는 경우 NAT는
        X2':x2'라고 하는 X2의 NAT 외부에 주소를 할당할 수 있습니다. X1이 트래픽을
        X2':x2'로 보내면 트래픽은 X1에서 X2로 릴레이해야 하는 NAT로 이동합니다. 이것을
        Hairpinning이라고 합니다.

   현재 배포된 모든 NAT가 Hairpinning을 지원하는 것은 아닙니다.

3.  Techniques Used by P2P Applications to Traverse NATs

   This section reviews in detail the currently known techniques for
   implementing peer-to-peer communication over existing NAT devices,
   from the perspective of the application or protocol designer.

3.1.  Relaying

   The most reliable, but least efficient, method of implementing peer-
   to-peer communication in the presence of a NAT device is to make the
   peer-to-peer communication look to the network like client/server
   communication through relaying.  Consider the scenario in figure 1.
   Two client hosts, A and B, have each initiated TCP or UDP connections
   to a well-known rendezvous server S.  The Rendezvous Server S has a
   publicly addressable IP address and is used for the purposes of
   registration, discovery, and relay.  Hosts behind NAT register with
   the server.  Peer hosts can discover hosts behind NATs and relay all
   end-to-end messages using the server.  The clients reside on separate
   private networks, and their respective NAT devices prevent either
   client from directly initiating a connection to the other.

                           Registry, Discovery
                           Combined with Relay
                                 Server S
                            192.0.2.128:20001
                                     |
        +----------------------------+----------------------------+
        | ^ Registry/              ^   ^ Registry/              ^ |
        | | Relay-Req Session(A-S) |   | Relay-Req Session(B-S) | |
        | | 192.0.2.128:20001      |   |  192.0.2.128:20001     | |
        | | 192.0.2.1:62000        |   |  192.0.2.254:31000     | |
        |                                                         |
      +--------------+                                 +--------------+
      | 192.0.2.1    |                                 | 192.0.2.254  |
      |              |                                 |              |
      |    NAT A     |                                 |    NAT B     |
      +--------------+                                 +--------------+
        |                                                         |
        | ^ Registry/              ^   ^ Registry/              ^ |
        | | Relay-Req Session(A-S) |   | Relay-Req Session(B-S) | |
        | |  192.0.2.128:20001     |   |  192.0.2.128:20001     | |
        | |     10.0.0.1:1234      |   |     10.1.1.3:1234      | |
        |                                                         |
     Client A                                                 Client B
     10.0.0.1:1234                                        10.1.1.3:1234

         Figure 1: Use of a Relay Server to communicate with peers

   Instead of attempting a direct connection, the two clients can simply
   use the server S to relay messages between them.  For example, to
   send a message to client B, client A simply sends the message to
   server S along its already established client/server connection, and
   server S then sends the message on to client B using its existing
   client/server connection with B.

   This method has the advantage that it will always work as long as
   both clients have connectivity to the server.  The enroute NAT device
   is not required to be EIM-NAT.  The obvious disadvantages of relaying
   are that it consumes the server's processing power and network
   bandwidth, and communication latency between the peering clients is
   likely to be increased even if the server has sufficient I/O
   bandwidth and is located correctly topology-wise.  The TURN protocol
   [TURN] defines a method of implementing application agnostic,
   session-oriented, packet relay in a relatively secure fashion.

3.2.  Connection Reversal

   The following connection reversal technique for a direct
   communication works only when one of the peers is behind a NAT device
   and the other is not.  For example, consider the scenario in figure
   2.  Client A is behind a NAT, but client B has a publicly addressable
   IP address.  Rendezvous Server S has a publicly addressable IP
   address and is used for the purposes of registration and discovery.
   Hosts behind a NAT register their endpoints with the server.  Peer
   hosts discover endpoints of hosts behind a NAT using the server.

                          Registry and Discovery
                                 Server S
                            192.0.2.128:20001
                                     |
        +----------------------------+----------------------------+
        | ^ Registry Session(A-S) ^     ^ Registry Session(B-S) ^ |
        | | 192.0.2.128:20001     |     |  192.0.2.128:20001    | |
        | | 192.0.2.1:62000       |     |  192.0.2.254:1234     | |
        |                                                         |
        | ^ P2P Session (A-B)     ^     |  P2P Session (B-A)    | |
        | | 192.0.2.254:1234      |     |  192.0.2.1:62000      | |
        | | 192.0.2.1:62000       |     v  192.0.2.254:1234     v |
        |                                                         |
      +--------------+                                            |
      | 192.0.2.1    |                                            |
      |              |                                            |
      |    NAT A     |                                            |
      +--------------+                                            |
        |                                                         |
        | ^ Registry Session(A-S) ^                               |
        | |  192.0.2.128:20001    |                               |
        | |     10.0.0.1:1234     |                               |
        |                                                         |
        | ^ P2P Session (A-B)     ^                               |
        | |  192.0.2.254:1234     |                               |
        | |     10.0.0.1:1234     |                               |
        |                                                         |
     Private Client A                                 Public Client B
     10.0.0.1:1234                                    192.0.2.254:1234

           Figure 2: Connection reversal using Rendezvous server

   Client A has private IP address 10.0.0.1, and the application is
   using TCP port 1234.  This client has established a connection with
   server S at public IP address 192.0.2.128 and port 20001.  NAT A has
   assigned TCP port 62000, at its own public IP address 192.0.2.1, to
   serve as the temporary public endpoint address for A's session with
   S; therefore, server S believes that client A is at IP address
   192.0.2.1 using port 62000.  Client B, however, has its own permanent
   IP address, 192.0.2.254, and the application on B is accepting TCP
   connections at port 1234.

   Now suppose client B wishes to establish a direct communication
   session with client A.  B might first attempt to contact client A
   either at the address client A believes itself to have, namely,
   10.0.0.1:1234, or at the address of A as observed by server S,
   namely, 192.0.2.1:62000.  In either case, the connection will fail.
   In the first case, traffic directed to IP address 10.0.0.1 will
   simply be dropped by the network because 10.0.0.1 is not a publicly
   routable IP address.  In the second case, the TCP SYN request from B
   will arrive at NAT A directed to port 62000, but NAT A will reject
   the connection request because only outgoing connections are allowed.

   After attempting and failing to establish a direct connection to A,
   client B can use server S to relay a request to client A to initiate
   a "reversed" connection to client B.  Client A, upon receiving this
   relayed request through S, opens a TCP connection to client B at B's
   public IP address and port number.  NAT A allows the connection to
   proceed because it is originating inside the firewall, and client B
   can receive the connection because it is not behind a NAT device.

   A variety of current peer-to-peer applications implement this
   technique.  Its main limitation, of course, is that it only works so
   long as only one of the communicating peers is behind a NAT device.
   If the NAT device is EIM-NAT, the public client can contact external
   server S to determine the specific public endpoint from which to
   expect Client-A-originated connection and allow connections from just
   those endpoints.  If the NAT device is EIM-NAT, the public client can
   contact the external server S to determine the specific public
   endpoint from which to expect connections originated by client A, and
   allow connections from just that endpoint.  If the NAT device is not
   EIM-NAT, the public client cannot know the specific public endpoint
   from which to expect connections originated by client A.  In the
   increasingly common case where both peers can be behind NATs, the
   Connection Reversal method fails.  Connection Reversal is not a
   general solution to the peer-to-peer connection problem.  If neither
   a "forward" nor a "reverse" connection can be established,
   applications often fall back to another mechanism such as relaying.

3.3.  UDP Hole Punching

   UDP hole punching relies on the properties of EIM-NATs to allow
   appropriately designed peer-to-peer applications to "punch holes"
   through the NAT device(s) enroute and establish direct connectivity
   with each other, even when both communicating hosts lie behind NAT
   devices.  When one of the hosts is behind a NAT that is not EIM-NAT,
   the peering host cannot predictably know the mapped endpoint to which
   to initiate a connection.  Further, the application on the host
   behind non-EIM-NAT would be unable to reuse an already established
   endpoint mapping for communication with different external
   destinations, and the hole punching technique would fail.

   This technique was mentioned briefly in Section 5.1 of RFC 3027
   [NAT-PROT], first described in [KEGEL], and used in some recent
   protocols [TEREDO, ICE].  Readers may refer to Section 3.4 for
   details on "TCP hole punching".

   We will consider two specific scenarios, and how applications are
   designed to handle both of them gracefully.  In the first situation,
   representing the common case, two clients desiring direct peer-to-
   peer communication reside behind two different NATs.  In the second,
   the two clients actually reside behind the same NAT, but do not
   necessarily know that they do.

3.3.1.  Peers behind Different NATs

   Consider the scenario in figure 3.  Clients A and B both have private
   IP addresses and lie behind different NAT devices.  Rendezvous Server
   S has a publicly addressable IP address and is used for the purposes
   of registration, discovery, and limited relay.  Hosts behind a NAT
   register their public endpoints with the server.  Peer hosts discover
   the public endpoints of hosts behind a NAT using the server.  Unlike
   in Section 3.1, peer hosts use the server to relay just connection
   initiation control messages, instead of end-to-end messages.

   The peer-to-peer application running on clients A and B use UDP port
   1234.  The rendezvous server S uses UDP port 20001.  A and B have
   each initiated UDP communication sessions with server S, causing NAT
   A to assign its own public UDP port 62000 for A's session with S, and
   causing NAT B to assign its port 31000 to B's session with S,
   respectively.

                      Registry and Discovery Combined
                            with Limited Relay
                                 Server S
                             192.0.2.128:20001
                                     |
        +----------------------------+----------------------------+
        | ^ Registry Session(A-S) ^     ^ Registry Session(B-S) ^ |
        | | 192.0.2.128:20001     |     |  192.0.2.128:20001    | |
        | | 192.0.2.1:62000       |     |  192.0.2.254:31000    | |
        |                                                         |
        | ^ P2P Session (A-B)     ^     ^  P2P Session (B-A)    ^ |
        | | 192.0.2.254:31000     |     |  192.0.2.1:62000      | |
        | | 192.0.2.1:62000       |     |  192.0.2.254:31000    | |
        |                                                         |
      +--------------+                                 +--------------+
      | 192.0.2.1    |                                 | 192.0.2.254  |
      |              |                                 |              |
      | EIM-NAT A    |                                 | EIM-NAT B    |
      +--------------+                                 +--------------+
        |                                                         |
        | ^ Registry Session(A-S) ^     ^ Registry Session(B-S) ^ |
        | |  192.0.2.128:20001    |     |  192.0.2.128:20001    | |
        | |     10.0.0.1:1234     |     |     10.1.1.3:1234     | |
        |                                                         |
        | ^ P2P Session (A-B)     ^     ^  P2P Session (B-A)    ^ |
        | |  192.0.2.254:31000    |     |  192.0.2.1:62000      | |
        | |     10.0.0.1:1234     |     |     10.1.1.3:1234     | |
        |                                                         |
     Client A                                                 Client B
     10.0.0.1:1234                                        10.1.1.3:1234

         Figure 3: UDP Hole Punching to set up direct connectivity

   Now suppose that client A wants to establish a UDP communication
   session directly with client B.  If A simply starts sending UDP
   messages to B's public endpoint 192.0.2.254:31000, then NAT B will
   typically discard these incoming messages (unless it employs
   Endpoint-Independent Filtering), because the source address and port
   number do not match those of S, with which the original outgoing
   session was established.  Similarly, if B simply starts sending UDP
   messages to A's public endpoint, then NAT A will typically discard
   these messages.

   Suppose A starts sending UDP messages to B's public endpoint, and
   simultaneously relays a request through server S to B, asking B to
   start sending UDP messages to A's public endpoint.  A's outgoing
   messages directed to B's public endpoint (192.0.2.254:31000) cause
   EIM-NAT A to open up a new communication session between A's private
   endpoint and B's public endpoint.  At the same time, B's messages to
   A's public endpoint (192.0.2.1:62000) cause EIM-NAT B to open up a
   new communication session between B's private endpoint and A's public
   endpoint.  Once the new UDP sessions have been opened up in each
   direction, clients A and B can communicate with each other directly
   without further burden on the server S.  Server S, which helps with
   relaying connection initiation requests to peer nodes behind NAT
   devices, ends up like an "introduction" server to peer hosts.

   The UDP hole punching technique has several useful properties.  Once
   a direct peer-to-peer UDP connection has been established between two
   clients behind NAT devices, either party on that connection can in
   turn take over the role of "introducer" and help the other party
   establish peer-to-peer connections with additional peers, minimizing
   the load on the initial introduction server S.  The application does
   not need to attempt to detect the kind of NAT device it is behind,
   since the procedure above will establish peer-to-peer communication
   channels equally well if either or both clients do not happen to be
   behind a NAT device.  The UDP hole punching technique even works
   automatically with multiple NATs, where one or both clients are
   distant from the public Internet via two or more levels of address
   translation.

3.3.2.  Peers behind the Same NAT

   Now consider the scenario in which the two clients (probably
   unknowingly) happen to reside behind the same EIM-NAT, and are
   therefore located in the same private IP address space, as in figure
   4.  A well-known Rendezvous Server S has a publicly addressable IP
   address and is used for the purposes of registration, discovery, and
   limited relay.  Hosts behind the NAT register with the server.  Peer
   hosts discover hosts behind the NAT using the server and relay
   messages using the server.  Unlike in Section 3.1, peer hosts use the
   server to relay just control messages, instead of all end-to-end
   messages.

   Client A has established a UDP session with server S, to which the
   common EIM-NAT has assigned public port number 62000.  Client B has
   similarly established a session with S, to which the EIM-NAT has
   assigned public port number 62001.

                     Registry and Discovery Combined
                           with Limited Relay
                                Server S
                            192.0.2.128:20001
                                    |
         ^ Registry Session(A-S) ^  | ^ Registry Session(B-S) ^
         | 192.0.2.128:20001     |  | |  192.0.2.128:20001    |
         | 192.0.2.1:62000       |  | |  192.0.2.1:62001      |
                                    |
                             +--------------+
                             | 192.0.2.1    |
                             |              |
                             |   EIM-NAT    |
                             +--------------+
                                    |
      +-----------------------------+----------------------------+
      | ^ Registry Session(A-S) ^      ^ Registry Session(B-S) ^ |
      | |  192.0.2.128:20001    |      |  192.0.2.128:20001    | |
      | |     10.0.0.1:1234     |      |     10.1.1.3:1234     | |
      |                                                          |
      | ^ P2P Session-try1(A-B) ^      ^ P2P Session-try1(B-A) ^ |
      | | 192.0.2.1:62001       |      |  192.0.2.1:62000      | |
      | |     10.0.0.1:1234     |      |     10.1.1.3:1234     | |
      |                                                          |
      | ^ P2P Session-try2(A-B) ^      ^ P2P Session-try2(B-A) ^ |
      | |     10.1.1.3:1234     |      |     10.0.0.1:1234     | |
      | |     10.0.0.1:1234     |      |     10.1.1.3:1234     | |
      |                                                          |
   Client A                                                   Client B
   10.0.0.1:1234                                         10.1.1.3:1234

   Figure 4: Use of local and public endpoints to communicate with peers

   Suppose that A and B use the UDP hole punching technique as outlined
   above to establish a communication channel using server S as an
   introducer.  Then A and B will learn each other's public endpoints as
   observed by server S, and start sending each other messages at those
   public endpoints.  The two clients will be able to communicate with
   each other this way as long as the NAT allows hosts on the internal
   network to open translated UDP sessions with other internal hosts and
   not just with external hosts.  This situation is referred to as
   "Hairpinning", because packets arriving at the NAT from the private
   network are translated and then looped back to the private network
   rather than being passed through to the public network.

   For example, consider P2P session-try1 above.  When A sends a UDP
   packet to B's public endpoint, the packet initially has a source
   endpoint of 10.0.0.1:1234 and a destination endpoint of
   192.0.2.1:62001.  The NAT receives this packet, translates it to have
   a source endpoint of 192.0.2.1:62000 and a destination endpoint of
   10.1.1.3:1234, and then forwards it on to B.

   Even if the NAT device supports hairpinning, this translation and
   forwarding step is clearly unnecessary in this situation, and adds
   latency to the dialog between A and B, besides burdening the NAT.
   The solution to this problem is straightforward and is described as
   follows.

   When A and B initially exchange address information through the
   Rendezvous server S, they include their own IP addresses and port
   numbers as "observed" by themselves, as well as their public
   endpoints as observed by S.  The clients then simultaneously start
   sending packets to each other at each of the alternative addresses
   they know about, and use the first address that leads to successful
   communication.  If the two clients are behind the same NAT, as is the
   case in figure 4 above, then the packets directed to their private
   endpoints (as attempted using P2P session-try2) are likely to arrive
   first, resulting in a direct communication channel not involving the
   NAT.  If the two clients are behind different NATs, then the packets
   directed to their private endpoints will fail to reach each other at
   all, but the clients will hopefully establish connectivity using
   their respective public endpoints.  It is important that these
   packets be authenticated in some way, however, since in the case of
   different NATs it is entirely possible for A's messages directed at
   B's private endpoint to reach some other, unrelated node on A's
   private network, or vice versa.

   The [ICE] protocol employs this technique effectively, in that
   multiple candidate endpoints (both private and public) are
   communicated between peering end hosts during an offer/answer
   exchange.  Endpoints that offer the most efficient end-to-end
   connection(s) are selected eventually for end-to-end data transfer.

3.3.3.  Peers Separated by Multiple NATs

   In some topologies involving multiple NAT devices, it is not possible
   for two clients to establish an "optimal" P2P route between them
   without specific knowledge of the topology.  Consider for example the
   scenario in figure 5.

                     Registry and Discovery Combined
                           with Limited Relay
                                Server S
                           192.0.2.128:20001
                                   |
         ^ Registry Session(A-S) ^ | ^ Registry Session(B-S) ^
         | 192.0.2.128:20001     | | | 192.0.2.128:20001     |
         | 192.0.2.1:62000       | | | 192.0.2.1:62001       |
                                   |
                            +--------------+
                            | 192.0.2.1    |
                            |              |
                            |  EIM-NAT X   |
                            | (Supporting  |
                            | Hairpinning) |
                            +--------------+
                                   |
      +----------------------------+----------------------------+
      | ^ Registry Session(A-S) ^     ^ Registry Session(B-S) ^ |
      | |  192.0.2.128:20001    |     |  192.0.2.128:20001    | |
      | |  192.168.1.1:30000    |     |  192.168.1.2:31000    | |
      |                                                         |
      | ^ P2P Session (A-B)     ^     ^ P2P Session (B-A)     ^ |
      | |  192.0.2.1:62001      |     |  192.0.2.1:62000      | |
      | |  192.168.1.1:30000    |     |  192.168.1.2:31000    | |
      |                                                         |
   +--------------+                                  +--------------+
   | 192.168.1.1  |                                  | 192.168.1.2  |
   |              |                                  |              |
   | EIM-NAT A    |                                  | EIM-NAT B    |
   +--------------+                                  +--------------+
       |                                                        |
       | ^ Registry Session(A-S) ^    ^ Registry Session(B-S) ^ |
       | |  192.0.2.128:20001    |    |  192.0.2.128:20001    | |
       | |     10.0.0.1:1234     |    |     10.1.1.3:1234     | |
       |                                                        |
       | ^ P2P Session (A-B)     ^    ^  P2P Session (B-A)    ^ |
       | |  192.0.2.1:62001      |    |  192.0.2.1:62000      | |
       | |     10.0.0.1:1234     |    |     10.1.1.3:1234     | |
       |                                                        |
   Client A                                                  Client B
   10.0.0.1:1234                                        10.1.1.3:1234

      Figure 5: Use of Hairpinning in setting up direct communication

   Suppose NAT X is an EIM-NAT deployed by a large Internet Service
   Provider (ISP) to multiplex many customers onto a few public IP
   addresses, and NATs A and B are small consumer NAT gateways deployed
   independently by two of the ISP's customers to multiplex their
   private home networks onto their respective ISP-provided IP
   addresses.  Only server S and NAT X have globally routable IP
   addresses; the "public" IP addresses used by NAT A and NAT B are
   actually private to the ISP's addressing realm, while client A's and
   B's addresses in turn are private to the addressing realms of NATs A
   and B, respectively.  Just as in the previous section, server S is
   used for the purposes of registration, discovery, and limited relay.
   Peer hosts use the server to relay connection initiation control
   messages, instead of all end-to-end messages.

   Now suppose clients A and B attempt to establish a direct peer-to-
   peer UDP connection.  The optimal method would be for client A to
   send messages to client B's public address at NAT B,
   192.168.1.2:31000 in the ISP's addressing realm, and for client B to
   send messages to A's public address at NAT B, namely,
   192.168.1.1:30000.  Unfortunately, A and B have no way to learn these
   addresses, because server S only sees the "global" public endpoints
   of the clients, 192.0.2.1:62000 and 192.0.2.1:62001.  Even if A and B
   had some way to learn these addresses, there is still no guarantee
   that they would be usable because the address assignments in the
   ISP's private addressing realm might conflict with unrelated address
   assignments in the clients' private realms.  The clients therefore
   have no choice but to use their global public endpoints as seen by S
   for their P2P communication, and rely on NAT X to provide
   hairpinning.

3.4.  TCP Hole Punching

   In this section, we will discuss the "TCP hole punching" technique
   used for establishing direct TCP connection between a pair of nodes
   that are both behind EIM-NAT devices.  Just as with UDP hole
   punching, TCP hole punching relies on the properties of EIM-NATs to
   allow appropriately designed peer-to-peer applications to "punch
   holes" through the NAT device and establish direct connectivity with
   each other, even when both communicating hosts lie behind NAT
   devices.  This technique is also known sometimes as "Simultaneous TCP
   Open".

   Most TCP sessions start with one endpoint sending a SYN packet, to
   which the other party responds with a SYN-ACK packet.  It is
   permissible, however, for two endpoints to start a TCP session by
   simultaneously sending each other SYN packets, to which each party
   subsequently responds with a separate ACK.  This procedure is known
   as "Simultaneous TCP Open" technique and may be found in figure 6 of
   the original TCP specification ([TCP]).  However, "Simultaneous TCP
   Open" is not implemented correctly on many systems, including NAT
   devices.

   If a NAT device receives a TCP SYN packet from outside the private
   network attempting to initiate an incoming TCP connection, the NAT
   device will normally reject the connection attempt by either dropping
   the SYN packet or sending back a TCP RST (connection reset) packet.
   In the case of SYN timeout or connection reset, the application
   endpoint will continue to resend a SYN packet, until the peer does
   the same from its end.

   Let us consider the case where a NAT device supports "Simultaneous
   TCP Open" sessions.  When a SYN packet arrives with source and
   destination endpoints that correspond to a TCP session that the NAT
   device believes is already active, then the NAT device would allow
   the packet to pass through.  In particular, if the NAT device has
   just recently seen and transmitted an outgoing SYN packet with the
   same address and port numbers, then it will consider the session
   active and allow the incoming SYN through.  If clients A and B can
   each initiate an outgoing TCP connection with the other client timed
   so that each client's outgoing SYN passes through its local NAT
   device before either SYN reaches the opposite NAT device, then a
   working peer-to-peer TCP connection will result.

   This technique may not always work reliably for the following
   reason(s).  If either node's SYN packet arrives at the remote NAT
   device too quickly (before the peering node had a chance to send the
   SYN packet), then the remote NAT device may either drop the SYN
   packet or reject the SYN with a RST packet.  This could cause the
   local NAT device in turn to close the new NAT session immediately or
   initiate end-of-session timeout (refer to Section 2.6 of [NAT-TERM])
   so as to close the NAT session at the end of the timeout.  Even as
   both peering nodes simultaneously initiate continued SYN
   retransmission attempts, some remote NAT devices might not let the
   incoming SYNs through if the NAT session is in an end-of-session
   timeout state.  This in turn would prevent the TCP connection from
   being established.

   In reality, the majority of NAT devices (more than 50%) support
   Endpoint-Independent Mapping and do not send ICMP errors or RSTs in
   response to unsolicited incoming SYNs.  As a result, the Simultaneous
   TCP Open technique does work across NAT devices in the majority of
   TCP connection attempts ([P2P-NAT], [TCP-CHARACT]).

3.5.  UDP Port Number Prediction

   A variant of the UDP hole punching technique exists that allows
   peer-to-peer UDP sessions to be created in the presence of some NATs
   implementing Endpoint-Dependent Mapping.  This method is sometimes
   called the "N+1" technique [BIDIR] and is explored in detail by
   Takeda [SYM-STUN].  The method works by analyzing the behavior of the
   NAT and attempting to predict the public port numbers it will assign
   to future sessions.  The public ports assigned are often predictable
   because most NATs assign mapping ports in sequence.

   Consider the scenario in figure 6.  Two clients, A and B, each behind
   a separate NAT, have established separate UDP connections with
   rendezvous server S.  Rendezvous server S has a publicly addressable
   IP address and is used for the purposes of registration and
   discovery.  Hosts behind a NAT register their endpoints with the
   server.  Peer hosts discover endpoints of the hosts behind NAT using
   the server.

                          Registry and Discovery
                                 Server S
                             192.0.2.128:20001
                                     |
                                     |
        +----------------------------+----------------------------+
        | ^ Registry Session(A-S) ^     ^ Registry Session(B-S) ^ |
        | | 192.0.2.128:20001     |     |  192.0.2.128:20001    | |
        | | 192.0.2.1:62000       |     |  192.0.2.254:31000    | |
        |                                                         |
        | ^ P2P Session (A-B)     ^     ^  P2P Session (B-A)    ^ |
        | | 192.0.2.254:31001     |     |  192.0.2.1:62001      | |
        | | 192.0.2.1:62001       |     |  192.0.2.254:31001    | |
        |                                                         |
   +---------------------+                       +--------------------+
   | 192.0.2.1           |                       |        192.0.2.254 |
   |                     |                       |                    |
   |    NAT A            |                       |        NAT B       |
   | (Endpoint-Dependent |                       | (Endpoint-Dependent|
   |  Mapping)           |                       |  Mapping)          |
   +---------------------+                       +--------------------+
        |                                                         |
        | ^ Registry Session(A-S) ^     ^ Registry Session(B-S) ^ |
        | |  192.0.2.128:20001    |     |  192.0.2.128:20001    | |
        | |     10.0.0.1:1234     |     |     10.1.1.3:1234     | |
        |                                                         |
        | ^ P2P Session (A-B)     ^     ^ P2P Session (B-A)     ^ |
        | |  192.0.2.254:31001    |     |  192.0.2.1:62001      | |
        | |     10.0.0.1:1234     |     |     10.1.1.3:1234     | |
        |                                                         |
     Client A                                                 Client B
     10.0.0.1:1234                                        10.1.1.3:1234

        Figure 6: UDP Port Prediction to set up direct connectivity

   NAT A has assigned its UDP port 62000 to the communication session
   between A and S, and NAT B has assigned its port 31000 to the session
   between B and S.  By communicating with server S, A and B learn each
   other's public endpoints as observed by S.  Client A now starts
   sending UDP messages to port 31001 at address 192.0.2.254 (note the
   port number increment), and client B simultaneously starts sending
   messages to port 62001 at address 192.0.2.1.  If NATs A and B assign
   port numbers to new sessions sequentially, and if not much time has
   passed since the A-S and B-S sessions were initiated, then a working
   bidirectional communication channel between A and B should result.
   A's messages to B cause NAT A to open up a new session, to which NAT
   A will (hopefully) assign public port number 62001, because 62001 is
   next in sequence after the port number 62000 it previously assigned
   to the session between A and S.  Similarly, B's messages to A will
   cause NAT B to open a new session, to which it will (hopefully)
   assign port number 31001.  If both clients have correctly guessed the
   port numbers each NAT assigns to the new sessions, then a
   bidirectional UDP communication channel will have been established.

   Clearly, there are many things that can cause this trick to fail.  If
   the predicted port number at either NAT already happens to be in use
   by an unrelated session, then the NAT will skip over that port number
   and the connection attempt will fail.  If either NAT sometimes or
   always chooses port numbers non-sequentially, then the trick will
   fail.  If a different client behind NAT A (or B, respectively) opens
   up a new outgoing UDP connection to any external destination after A
   (B) establishes its connection with S but before sending its first
   message to B (A), then the unrelated client will inadvertently
   "steal" the desired port number.  This trick is therefore much less
   likely to work when either NAT involved is under load.

   Since in practice an application implementing this trick would still
   need to work even when one of the NATs employs Endpoint-Independent
   Mapping, the application would need to detect beforehand what kind of
   NAT is involved on either end and modify its behavior accordingly,
   increasing the complexity of the algorithm and the general
   brittleness of the network.  Finally, port number prediction has
   little chance of working if either client is behind two or more
   levels of NAT and the NAT(s) closest to the client employs Endpoint-
   Dependent Mapping.

3.6.  TCP Port Number Prediction

   This is a variant of the "TCP Hole Punching" technique to set up
   direct peer-to-peer TCP sessions across NATs employing Address-
   Dependent Mapping.

   Unfortunately, this trick may be even more fragile and timing-
   sensitive than the UDP port number prediction trick described
   earlier.  First, predicting the public port a NAT would assign could
   be wrong.  In addition, if either client's SYN arrives at the
   opposite NAT device too quickly, then the remote NAT device may
   reject the SYN with a RST packet, causing the local NAT device in
   turn to close the new session and make future SYN retransmission
   attempts using the same port numbers futile.

4.  Recent Work on NAT Traversal

   [P2P-NAT] has a detailed discussion on the UDP and TCP hole punching
   techniques for NAT traversal.  [P2P-NAT] also lists empirical results
   from running a test program [NAT-CHECK] across a number of commercial
   NAT devices.  The results indicate that UDP hole punching works
   widely on more than 80% of the NAT devices, whereas TCP hole punching
   works on just over 60% of the NAT devices tested.  The results also
   indicate that TCP or UDP hairpinning is not yet widely available on
   commercial NAT devices, as less than 25% of the devices passed the
   tests ([NAT-CHECK]) for Hairpinning.  Readers may also refer to
   [JENN-RESULT] and [SAIK-RESULT] for empirical test results in
   classifying publicly available NAT devices.  [JENN-RESULT] provides
   results of NAT classification using tests spanning across different
   IP protocols.  [SAIK-RESULT] focuses exclusively on classifying NAT
   devices by the TCP behavioral characteristics.

   [TCP-CHARACT] and [NAT-BLASTER] focus on TCP hole punching, exploring
   and comparing several alternative approaches.  [NAT-BLASTER] takes an
   analytical approach, analyzing different cases of observed NAT
   behavior and ways applications might address them.  [TCP-CHARACT]
   adopts a more empirical approach, measuring the commonality of
   different types of NAT behavior relevant to TCP hole punching.  This
   work finds that using more sophisticated techniques than those used
   in [P2P-NAT], up to 88% of currently deployed NATs can support TCP
   hole punching.

   [TEREDO] is a NAT traversal service that uses relay technology to
   connect IPv4 nodes behind NAT devices to IPv6 nodes, external to the
   NAT devices.  [TEREDO] provides for peer communication across NAT
   devices by tunneling packets over UDP, across the NAT device(s) to a
   relay node.  Teredo relays act as Rendezvous servers to relay traffic
   from private IPv4 nodes to the nodes in the external realm and vice
   versa.

   [ICE] is a NAT traversal protocol for setting up media sessions
   between peer nodes for a class of multi-media applications.  [ICE]
   requires peering nodes to run the Simple Traversal of the UDP
   Protocol through NAT (STUN) protocol [STUN] on the same port number
   used to terminate media session(s).  Applications that use signaling
   protocols such as SIP ([SIP]) may embed the NAT traversal attributes
   for the media session within the signaling sessions and use the
   offer/answer type of exchange between peer nodes to set up end-to-end
   media session(s) across NAT devices.  [ICE-TCP] is an extension of
   ICE for TCP-based media sessions.

   A number of online gaming and media-over-IP applications, including
   Instant Messaging applications, use the techniques described in the
   document for peer-to-peer connection establishment.  Some
   applications may use multiple distinct rendezvous servers for
   registration, discovery, and relay functions for load balancing,
   among other reasons.  For example, the well-known media-over-IP
   application "Skype" uses a central public server for login and
   different public servers for end-to-end relay function.

5.  Summary of Observations

5.1.  TCP/UDP Hole Punching

   TCP/UDP hole punching appears to be the most efficient existing
   method of establishing direct TCP/UDP peer-to-peer communication
   between two nodes that are both behind NATs.  This technique has been
   used with a wide variety of existing NATs.  However, applications may
   need to prepare to fall back to simple relaying when direct
   communication cannot be established.

   The TCP/UDP hole punching technique has a caveat in that it works
   only when the traversing NAT is EIM-NAT.  When the NAT device enroute
   is not EIM-NAT, the application is unable to reuse an already
   established endpoint mapping for communication with different
   external destinations and the technique would fail.  However, many of
   the NAT devices deployed in the Internet are EIM-NAT devices.  That
   makes the TCP/UDP hole punching technique broadly applicable
   [P2P-NAT].  Nevertheless, a substantial fraction of deployed NATs do
   employ Endpoint-Dependent Mapping and do not support the TCP/UDP hole
   punching technique.

5.2.  NATs Employing Endpoint-Dependent Mapping

   NATs Employing Endpoint-Dependent Mapping weren't a problem with
   client-server applications such as Web browsers, which only need to
   initiate outgoing connections.  However, in recent times, P2P
   applications such as Instant Messaging and Voice-over-IP have been in
   wide use.  NATs employing Endpoint-Dependent Mapping are not suitable
   for P2P applications as techniques such as TCP/UDP hole punching will
   not work across these NAT devices.

5.3.  Peer Discovery

   Application peers may be present within the same NAT domain or
   external to the NAT domain.  In order for all peers (those within or
   external to the NAT domain) to discover the application endpoint, an
   application may choose to register its private endpoints in addition
   to public endpoints with the rendezvous server.

5.4.  Hairpinning

   Support for hairpinning is highly beneficial to allow hosts behind
   EIM-NAT to communicate with other hosts behind the same NAT device
   through their public, possibly translated, endpoints.  Support for
   hairpinning is particularly useful in the case of large-capacity NATs
   deployed as the first level of a multi-level NAT scenario.  As
   described in Section 3.3.3, hosts behind the same first-level NAT but
   different second-level NATs do not have a way to communicate with
   each other using TCP/UDP hole punching techniques, unless the first-
   level NAT also supports hairpinning.  This would be the case even
   when all NAT devices in a deployment preserve endpoint identities.

6.  Security Considerations

   This document does not inherently create new security issues.
   Nevertheless, security risks may be present in the techniques
   described.  This section describes security risks the applications
   could inadvertently create in attempting to support direct
   communication across NAT devices.

6.1.  Lack of Authentication Can Cause Connection Hijacking

   Applications must use appropriate authentication mechanisms to
   protect their connections from accidental confusion with other
   connections as well as from malicious connection hijacking or
   denial-of-service attacks.  Applications effectively must interact
   with multiple distinct IP address domains, but are not generally
   aware of the exact topology or administrative policies defining these
   address domains.  While attempting to establish connections via
   TCP/UDP hole punching, applications send packets that may frequently
   arrive at an entirely different host than the intended one.

   For example, many consumer-level NAT devices provide Dynamic Host
   Configuration Protocol (DHCP) services that are configured by default
   to hand out site-local IP addresses in a particular address range.
   Say, a particular consumer NAT device, by default, hands out IP
   addresses starting with 192.168.1.100.  Most private home networks
   using that NAT device will have a host with that IP address, and many
   of these networks will probably have a host at address 192.168.1.101
   as well.  If host A at address 192.168.1.101 on one private network
   attempts to establish a connection by UDP hole punching with host B
   at 192.168.1.100 on a different private network, then as part of this
   process host A will send discovery packets to address 192.168.1.100
   on its local network, and host B will send discovery packets to
   address 192.168.1.101 on its network.  Clearly, these discovery
   packets will not reach the intended machine since the two hosts are
   on different private networks, but they are very likely to reach SOME
   machine on these respective networks at the standard UDP port numbers
   used by this application, potentially causing confusion, especially
   if the application is also running on those other machines and does
   not properly authenticate its messages.

   This risk due to aliasing is therefore present even without a
   malicious attacker.  If one endpoint, say, host A, is actually
   malicious, then without proper authentication the attacker could
   cause host B to connect and interact in unintended ways with another
   host on its private network having the same IP address as the
   attacker's (purported) private address.  Since the two endpoint hosts
   A and B presumably discovered each other through a public rendezvous
   server S, providing registration, discovery, and limited relay
   services, and neither S nor B has any means to verify A's reported
   private address, applications may be advised to assume that any IP
   address they find to be suspect until they successfully establish
   authenticated two-way communication.

6.2.  Denial-of-Service Attacks

   Applications and the public servers that support them must protect
   themselves against denial-of-service attacks, and ensure that they
   cannot be used by an attacker to mount denial-of-service attacks
   against other targets.  To protect themselves, applications and
   servers must avoid taking any action requiring significant local
   processing or storage resources until authenticated two-way
   communication is established.  To avoid being used as a tool for
   denial-of-service attacks, applications and servers must minimize the
   amount and rate of traffic they send to any newly discovered IP
   address until after authenticated two-way communication is
   established with the intended target.

   For example, applications that register with a public rendezvous
   server can claim to have any private IP address, or perhaps multiple
   IP addresses.  A well-connected host or group of hosts that can
   collectively attract a substantial volume of connection attempts
   (e.g., by offering to serve popular content) could mount a denial-
   of-service attack on a target host C simply by including C's IP
   address in its own list of IP addresses it registers with the
   rendezvous server.  There is no way the rendezvous server can verify
   the IP addresses, since they could well be legitimate private network
   addresses useful to other hosts for establishing network-local
   communication.  The application protocol must therefore be designed
   to size- and rate-limit traffic to unverified IP addresses in order
   to avoid the potential damage such a concentration effect could
   cause.

6.3.  Man-in-the-Middle Attacks

   Any network device on the path between a client and a public
   rendezvous server can mount a variety of man-in-the-middle attacks by
   pretending to be a NAT.  For example, suppose host A attempts to
   register with rendezvous server S, but a network-snooping attacker is
   able to observe this registration request.  The attacker could then
   flood server S with requests that are identical to the client's
   original request except with a modified source IP address, such as
   the IP address of the attacker itself.  If the attacker can convince
   the server to register the client using the attacker's IP address,
   then the attacker can make itself an active component on the path of
   all future traffic from the server AND other hosts to the original
   client, even if the attacker was originally only able to snoop the
   path from the client to the server.

   The client cannot protect itself from this attack by authenticating
   its source IP address to the rendezvous server, because in order to
   be NAT-friendly the application must allow intervening NATs to change
   the source address silently.  This appears to be an inherent security
   weakness of the NAT paradigm.  The only defense against such an
   attack is for the client to authenticate and potentially encrypt the
   actual content of its communication using appropriate higher-level
   identities, so that the interposed attacker is not able to take
   advantage of its position.  Even if all application-level
   communication is authenticated and encrypted, however, this attack
   could still be used as a traffic analysis tool for observing who the
   client is communicating with.

6.4.  Security Impact from EIM-NAT Devices

   Designing NAT devices to preserve endpoint identities does not weaken
   the security provided by the NAT device.  For example, a NAT device
   employing Endpoint-Independent Mapping and Endpoint-Dependent
   Filtering is no more "promiscuous" than a NAT device employing
   Endpoint-Dependent Mapping and Endpoint-Dependent Filtering.
   Filtering incoming traffic aggressively using Endpoint-Dependent
   Filtering while employing Endpoint-Independent Mapping allows a NAT
   device to be friendly to applications without compromising the
   principle of rejecting unsolicited incoming traffic.

   Endpoint-Independent Mapping could arguably increase the
   predictability of traffic emerging from the NAT device, by revealing
   the relationships between different TCP/UDP sessions and hence about
   the behavior of applications running within the enclave.  This
   predictability could conceivably be useful to an attacker in
   exploiting other network- or application-level vulnerabilities.  If
   the security requirements of a particular deployment scenario are so
   critical that such subtle information channels are of concern, then
   perhaps the NAT device was not to have been configured to allow
   unrestricted outgoing TCP/UDP traffic in the first place.  A NAT
   device configured to allow communication originating from specific
   applications at specific ports, or via tightly controlled
   application-level gateways, may accomplish the security requirements
   of such deployment scenarios.

7.  Acknowledgments

   The authors wish to thank Henrik Bergstrom, David Anderson, Christian
   Huitema, Dan Wing, Eric Rescorla, and other BEHAVE work group members
   for their valuable feedback on early versions of this document.  The
   authors also wish to thank Francois Audet, Kaushik Biswas, Spencer
   Dawkins, Bruce Lowekamp, and Brian Stucker for agreeing to be
   technical reviewers for this document.

8.  References

8.1.  Normative References

   [NAT-TERM]    Srisuresh, P. and M. Holdrege, "IP Network Address
                 Translator (NAT) Terminology and Considerations", RFC
                 2663, August 1999.

   [NAT-TRAD]    Srisuresh, P. and K. Egevang, "Traditional IP Network
                 Address Translator (Traditional NAT)", RFC 3022,
                 January 2001.

   [BEH-UDP]     Audet, F., Ed., and C. Jennings, "Network Address
                 Translation (NAT) Behavioral Requirements for Unicast
                 UDP", BCP 127, RFC 4787, January 2007.

8.2.  Informative References

   [BEH-APP]     Ford, B., Srisuresh, P., and D. Kegel, "Application
                 Design Guidelines for Traversal through Network Address
                 Translators", Work in Progress, March 2007.

   [BEH-ICMP]    Srisuresh, P., Ford, B., Sivakumar, S., and S. Guha,
                 "NAT Behavioral Requirements for ICMP protocol", Work
                 in Progress, February 2008.

   [BEH-TCP]     Guha, S., Biswas, K., Ford, B., Sivakumar, S., and P.
                 Srisuresh, "NAT Behavioral Requirements for TCP", Work
                 in Progress, April 2007.

   [BIDIR]       Peer-to-Peer Working Group, NAT/Firewall Working
                 Committee, "Bidirectional Peer-to-Peer Communication
                 with Interposing Firewalls and NATs", August 2001.
                 http://www.peer-to-peerwg.org/tech/nat/

   [ICE]         Rosenberg, J., "Interactive Connectivity Establishment
                 (ICE): A Methodology for Network Address Translator
                 (NAT) Traversal for Offer/Answer Protocols", Work in
                 Progress, October 2007.

   [ICE-TCP]     Rosenberg, J., "TCP Candidates with Interactive
                 Connectivity Establishment (ICE)", Work in Progress,
                 July 2007.

   [JENN-RESULT] Jennings, C., "NAT Classification Test Results", Work
                 in Progress, July 2007.

   [KEGEL]       Kegel, D., "NAT and Peer-to-Peer Networking", July
                 1999. http://www.alumni.caltech.edu/~dank/peer-nat.html

   [MIDCOM]      Srisuresh, P., Kuthan, J., Rosenberg, J., Molitor, A.,
                 and A. Rayhan, "Middlebox communication architecture
                 and framework", RFC 3303, August 2002.

   [NAT-APPL]    Senie, D., "Network Address Translator (NAT)-Friendly
                 Application Design Guidelines", RFC 3235, January 2002.

   [NAT-BLASTER] Biggadike, A., Ferullo, D., Wilson, G., and Perrig, A.,
                 "Establishing TCP Connections Between Hosts Behind
                 NATs", ACM SIGCOMM ASIA Workshop, April 2005.

   [NAT-CHECK]   Ford, B., "NAT check Program" available online as
                 http://midcom-p2p.sourceforge.net, February 2005.

   [NAT-PMP]     Cheshire, S., Krochmal, M., and K. Sekar, "NAT Port
                 Mapping Protocol (NAT-PMP)", Work in Progress, October
                 2006.

   [NAT-PROT]    Holdrege, M. and P. Srisuresh, "Protocol Complications
                 with the IP Network Address Translator", RFC 3027,
                 January 2001.

   [NAT-PT]      Tsirtsis, G. and P. Srisuresh, "Network Address
                 Translation - Protocol Translation (NAT-PT)", RFC 2766,
                 February 2000.

   [NAT-PT-HIST] Aoun, C. and E. Davies, "Reasons to Move the Network
                 Address Translator - Protocol Translator (NAT-PT) to
                 Historic Status", RFC 4966, July 2007.

   [NSIS-NSLP]   Stiemerling, M., Tschofenig, H., Aoun, C., and E.
                 Davies, "NAT/Firewall NSIS Signaling Layer Protocol
                 (NSLP)", Work in Progress, July 2007.

   [P2P-NAT]     Ford, B., Srisuresh, P., and Kegel, D., "Peer-to-Peer
                 Communication Across Network Address Translators",
                 Proceedings of the USENIX Annual Technical Conference
                 (Anaheim, CA), April 2005.

   [RFC3330]     IANA, "Special-Use IPv4 Addresses", RFC 3330, September
                 2002.

   [RFC4941]     Narten, T., Draves, R., and S. Krishnan, "Privacy
                 Extensions for Stateless Address Autoconfiguration in
                 IPv6", RFC 4941, September 2007.

   [RSIP]        Borella, M., Lo, J., Grabelsky, D., and G. Montenegro,
                 "Realm Specific IP: Framework", RFC 3102, October 2001.

   [SAIK-RESULT] Guha, Saikat,  "NAT STUNT Results" available online as
                 https://www.guha.cc/saikat/stunt-results.php.

   [SIP]         Rosenberg, J., Schulzrinne, H., Camarillo, G.,
                 Johnston, A., Peterson, J., Sparks, R., Handley, M.,
                 and E. Schooler, "SIP:  Session Initiation Protocol",
                 RFC 3261, June 2002.

   [SOCKS]       Leech, M., Ganis, M., Lee, Y., Kuris, R., Koblas, D.,
                 and L. Jones, "SOCKS Protocol Version 5", RFC 1928,
                 March 1996.

   [STUN]        Rosenberg, J., Weinberger, J., Huitema, C., and R.
                 Mahy, "STUN - Simple Traversal of User Datagram
                 Protocol (UDP) Through Network Address Translators
                 (NATs)", RFC 3489, March 2003.

   [SYM-STUN]    Takeda, Y., "Symmetric NAT Traversal using STUN", Work
                 in Progress, June 2003.

   [TCP]         Postel, J., "Transmission Control Protocol", STD 7, RFC
                 793, September 1981.

   [TCP-CHARACT] Guha, S., and Francis, P., "Characterization and
                 Measurement of TCP Traversal through NATs and
                 Firewalls", Proceedings of Internet Measurement
                 Conference (IMC), Berkeley, CA, October 2005, pp. 199-
                 211.

   [TEREDO]      Huitema, C., "Teredo: Tunneling IPv6 over UDP through
                 Network Address Translations (NATs)", RFC 4380,
                 February 2006.

   [TURN]        Rosenberg, J., Mahy, R., and P. Matthews, "Traversal
                 Using Relays around NAT (TURN): Relay Extensions to
                 Session Traversal Utilities for NAT (STUN)", Work in
                 Progress, January 2008.

   [UNSAF]       Daigle, L., Ed., and IAB, "IAB Considerations for
                 UNilateral Self-Address Fixing (UNSAF) Across Network
                 Address Translation", RFC 3424, November 2002.

   [UPNP]        UPnP Forum, "Internet Gateway Device (IGD) Standardized
                 Device Control Protocol V 1.0", November 2001,
                 http://www.upnp.org/standardizeddcps/igd.asp

   [V6-CPE-SEC]  Woodyatt, J., "Recommended Simple Security Capabilities
                 in Customer Premises Equipment for Providing
                 Residential IPv6 Internet Service", Work in Progress,
                 June 2007.

Authors' Addresses

   Pyda Srisuresh
   Kazeon Systems, Inc.
   1161 San Antonio Rd.
   Mountain View, CA 94043
   USA

   Phone: (408)836-4773
   EMail: srisuresh@yahoo.com


   Bryan Ford
   Laboratory for Computer Science
   Massachusetts Institute of Technology
   77 Massachusetts Ave.
   Cambridge, MA 02139
   USA

   Phone: (617) 253-5261
   EMail: baford@mit.edu
   Web: http://www.brynosaurus.com/


   Dan Kegel
   Kegel.com
   901 S. Sycamore Ave.
   Los Angeles, CA 90036
   USA

   Phone: 323 931-6717
   EMail: dank@kegel.com
   Web: http://www.kegel.com/

Full Copyright Statement

   Copyright (C) The IETF Trust (2008).

   This document is subject to the rights, licenses and restrictions
   contained in BCP 78, and except as set forth therein, the authors
   retain all their rights.

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND
   THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF
   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

Intellectual Property

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.