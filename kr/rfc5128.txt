Network Working Group                                       P. Srisuresh
Request for Comments: 5128                                Kazeon Systems
Category: Informational                                          B. Ford
                                                                  M.I.T.
                                                                D. Kegel
                                                               kegel.com
                                                              March 2008


         네트워크 주소 변환기(NAT)를 통한 P2P(Peer-to-Peer) 통신의 상태

Status of This Memo

   이 메모는 인터넷 커뮤니티에 대한 정보를 제공합니다. 어떤 종류의 인터넷 표준도 지정하지
   않습니다. 메모 배포에 제한은 없습니다.

개요

   이 메모는 현재 네트워크 주소 변환기(NAT)가 있는 상태에서 직접 통신을 설정하기 위해 응용
   프로그램에서 사용 중인 것으로 알려진 다양한 방법을 문서화합니다. 이 메모는 주로 설명을 위한
   것이지만 보안 고려 사항 섹션에서는 설명된 방법을 사용할 때 응용 프로그램이 실수로 생성할 수
   있는 보안 취약점을 처리하는 방법에 대한 순전히 권고 사항을 제공합니다. 이 메모는 TCP 및
   UDP 기반 애플리케이션에서 사용되는 NAT 순회 접근 방식을 다룹니다. 이 메모는 설명된 방법을
   보증하는 것이 아니라 문서에서 캡처하려는 시도일 뿐입니다.

목차

   1. Introduction and Scope (소개 및 범위)
   2. Terminology and Conventions Used (사용된 용어 및 규약)
      2.1. Endpoint
      2.2. Endpoint Mapping
      2.3. Endpoint-Independent Mapping
      2.4. Endpoint-Dependent Mapping
      2.5. Endpoint-Independent Filtering
      2.6. Endpoint-Dependent Filtering
      2.7. P2P Application
      2.8. NAT-Friendly P2P Application
      2.9. Endpoint-Independent Mapping NAT (EIM-NAT)
      2.10. Hairpinning
   3. Techniques Used by P2P Applications to Traverse NATs (NAT 통과를 위해 P2P 애플리케이션에서 사용하는 기술)
      3.1. Relaying (중계))
      3.2. Connection Reversal
      3.3. UDP Hole Punching
           3.3.1. Peers behind Different NATs (다른 NAT 뒤의 피어)
           3.3.2. Peers behind the Same NAT (동일한 NAT 뒤에 있는 피어)
           3.3.3. Peers Separated by Multiple NATs (여러 NAT로 분리된 피어)
      3.4. TCP Hole Punching
      3.5. UDP Port Number Prediction (UDP 포트 번호 예측)
      3.6. TCP Port Number Prediction (TCP 포트 번호 예측)
   4. Recent Work on NAT Traversal (NAT 순회에 대한 최근 작업)
   5. Summary of Observations (관찰 요약)
      5.1. TCP/UDP Hole Punching
      5.2. NATs Employing Endpoint-Dependent Mapping
      5.3. Peer Discovery
      5.4. Hairpinning
   6. Security Considerations (보안 고려 사항)
      6.1. Lack of Authentication Can Cause Connection Hijacking (인증 부족으로 인한 커넥션 하이재킹 야기)
      6.2. Denial-of-Service Attacks
      6.3. Man-in-the-Middle Attacks
      6.4. Security Impact from EIM-NAT Devices
   7. Acknowledgments (감사의 말)
   8. References (참조)
      8.1. Normative References (규범적 참조)
      8.2. Informative References (유익한 참조)

1.  Introduction and Scope (소개 및 범위)

   오늘날의 인터넷은 네트워크 주소 변환기(NATs)의 유비쿼터스 배치를 보았습니다. 배치에서 NAT
   장치를 활용하는 다양한 NAT 장치 및 다양한 네트워크 토폴로지가 있습니다. 이러한 NAT 장치에
   의해 설정된 비대칭 주소 지정 및 연결 체계는 원격 회의 및 멀티플레이어 온라인 게임과 같은
   peer-to-peer(P2P) 애플리케이션 및 프로토콜에 고유한 문제를 발생시켰습니다. 이러한
   문제는 IPv6 세계에서도 지속될 가능성이 높습니다. IPv6으로 전환하는 동안 IPv4 전용
   노드가 IPv6 전용 노드[NAT-PT]와 통신할 수 있도록 하기 위해 일부 형태의 NAT가 필요할 수
   있습니다[NAT-PT-HIST]. 미래의 "순수한 IPv6 세계"에도 NAT와 유사한 필터링 동작을
   사용하지만 주소 변환[V6-CPE-SEC]이 없는 방화벽이 여전히 포함될 수 있습니다. 필터링 동작은
   P2P 애플리케이션의 기능을 방해합니다. 이러한 이유로 NAT 통과를 위해 이 문서에 설명된 기술을
   사용하는 IPv6 응용 프로그램은 NAT와 유사한 필터링 동작이 있는 일부 방화벽에서도 작동할 수
   있습니다.

   현재 배포된 NAT 장치는 클라이언트/서버 패러다임을 중심으로 설계되었으며, 사설 네트워크
   내부의 상대적으로 익명인 클라이언트 시스템은 안정적인 IP 주소와 DNS 이름을 사용하여 공용
   서버에 대한 연결을 시작합니다. 도중에 만나는 NAT 장치는 클라이언트 시스템에 동적 주소
   할당을 제공합니다. NAT 장치 뒤에 있는 내부 호스트의 익명성(사설 IP 주소) 및 액세스
   불가능성에 대한 환상은 나가는 연결만 시작하면 되는 웹 브라우저와 같은 응용 프로그램에서는
   문제가 되지 않습니다. 이러한 익명성과 접근 불가능성에 대한 환상은 때때로 개인 정보 보호
   혜택으로 인식됩니다. [RFC4941]의 섹션 2.2에 언급된 바와 같이, Small-Office-Home
   -Office (SOHO) NAT를 사용하는 대부분의 경우 이러한 개인 정보 보호는 환상일 수
   있습니다.

   P2P 패러다임에서 일반적으로 "클라이언트"로 간주되는 인터넷 호스트는 피어 노드에 대한 
   세션을 시작할 뿐만 아니라 피어 노드가 시작한 세션도 수락합니다. 개시자와 응답자는 영구 IP
   주소나 다른 형태의 공용 네트워크 존재를 갖지 않는 엔드포인트 없이 서로 다른 NAT 장치
   뒤에 있을 수 있습니다. 예를 들어, 일반적인 온라인 게임 아키텍처는 자신을 등록하고 피어
   호스트를 검색하기 위해 공개적으로 주소 지정이 가능한 랑데부 서버에 접속하는 모든 참여
   애플리케이션 호스트를 포함합니다. 랑데부 서버와의 통신에 이어 호스트는 게임 플레이 중에
   업데이트를 빠르고 효율적으로 전파하기 위해 서로 직접 연결을 설정합니다. 마찬가지로 파일
   공유 응용 프로그램은 리소스 검색 또는 검색을 위해 잘 알려진 랑데부 서버에 연결할 수 있지만
   데이터 전송을 위해 피어 호스트와 직접 연결을 설정할 수 있습니다. NAT 장치 뒤에 있는
   호스트는 일반적으로 다른 피어에서 들어오는 TCP 또는 UDP 연결이 향할 수 있는 인터넷에서
   영구적으로 볼 수 있는 공용 포트가 없기 때문에 NAT 장치는 피어 투 피어 연결에 문제를
   일으킵니다. RFC 3235[NAT-APPL]는 이 문제를 간략하게 설명합니다.

   [NAT-PMP], [NSIS-NSLP], [SOCKS], [RSIP], [MIDCOM] 및 [UPNP]와 같이 응용
   프로그램과 NAT 장치 간의 명시적 신호를 포함하는 NAT 통과 전략은 이 문서의 범위를
   벗어납니다. 사용 가능한 경우 이러한 기술은 문서에 설명된 기술을 보완합니다. [UNSAF]가
   범위 내에 있습니다.

   이 문서에서는 응용 프로그램이 NAT 장치를 직접 변경하지 않고 NAT 장치를 우회하여 작동하는
   현재 알려진 방법을 요약합니다. 설명된 기술은 BEHAVE 문서([BEH-UDP], [BEH-TCP] 및
   [BEH-ICMP]) 이전 버전입니다. 문서의 범위는 응용 프로그램의 끝점 간에 양방향 통신을
   설정하는 데 사용되는 현재 알려진 기술을 설명하는 것으로 제한됩니다. 실행 중인 세션과 관련된
   시간 초과, RST 처리, keepalive 등에 대한 논의는 이 문서의 범위를 벗어납니다. 또한
   범위는 TCP 및 UDP 기반 응용 프로그램에 대한 기술을 설명하는 것으로 제한됩니다. 이 문서의
   목적은 일반적인 애플리케이션[BEH-APP] 또는 특정 클래스의 애플리케이션[ICE]에 대한 NAT
   통과 문제에 대한 솔루션을 제공하는 것이 아닙니다.

2.  Terminology and Conventions Used (사용된 용어 및 규약)

   이 문서에서는 IP 주소 192.0.2.1, 192.0.2.128 및 192.0.2.254를 공용 IP 주소의
   예로 사용합니다[RFC3330]. 이러한 주소는 모두 동일한 /24 네트워크에 있지만 이는
   [RFC3330]에서 사용할 수 있는 예제 주소의 제한 사항입니다. 실제로 이러한 주소는 서로 다른
   네트워크에 있습니다. 포트 사용에 대한 표기는 모든 클라이언트가 1-2000 범위의 포트를
   사용하고 서버는 20000-21000 범위의 포트를 사용합니다. NAT 장치는 엔드포인트 매핑에 포트
   30000 이상을 사용합니다.

   NAT 분류 및 용어에 대한 정보는 [NAT-TERM]을 참조하십시오. NAT 유형이 앞에 붙거나 달리
   명시적으로 언급되지 않는 한, 이 문서 전체에서 사용되는 NAT라는 용어는 기존 NAT[NAT-
   TRAD]를 나타냅니다. 기존 NAT에는 기본 NAT와 네트워크 주소 포트 변환기(NAPT)의 두 가지
   변형이 있습니다. 이 중에서 NAPT는 가장 일반적으로 배포되는 NAT 장치입니다. NAPT를
   사용하면 여러 개인 호스트가 단일 공용 IP 주소를 동시에 공유할 수 있습니다.

   P2P 애플리케이션과 관련된 문제는 내부 호스트가 단일 끝점(사설 IP, 사설 포트)에서 외부
   네트워크의 여러 개별 끝점으로 여러 동시 세션을 시작할 때 NAT가 작동하는 방식입니다.

   [STUN]은 "Full Cone", "Restricted Cone", "Port Restricted Cone" 및
   "Symmetric"이라는 용어를 사용하여 NAT 구현을 추가로 분류합니다. 불행하게도 이 용어는
   많은 혼란의 원인이 되어 왔습니다. 이러한 이유로 이 문서는 NAT 구현을 구별하기 위해
   [BEH-UDP]의 용어를 채택합니다.

   아래 목록은 이 문서 전체에서 사용되는 용어입니다.

2.1.  Endpoint

   엔드포인트는 끝 호스트의 세션별 튜플입니다. 엔드포인트는 각 IP 프로토콜에 대해 다르게
   표시될 수 있습니다. 예를 들어 UDP 또는 TCP 세션 엔드포인트는 (IP 주소, UDP/TCP
   포트)의 튜플로 표시됩니다.

2.2.  Endpoint Mapping

   사설 영역의 호스트가 NAT 장치를 통해 공용 영역의 호스트로 나가는 세션을 시작하면 NAT 장치는
   외부 호스트의 후속 응답 패킷을 NAT에서 수신할 수 있도록 사설 엔드포인트를 변환할 공용
   엔드포인트를 할당하고, 번환되어 및 사설 endpoint로 전달됩니다. 사설 엔드포인트를 공용
   엔드포인트로 또는 그 반대로 변환하기 위한 NAT 장치의 할당을 Endpoint Mapping이라고
   합니다. NAT는 Endpoint Mapping을 사용하여 세션 기간 동안 변환을 수행합니다.

2.3.  Endpoint-Independent Mapping

   "Endpoint-Independent Mapping"은 다음과 같이 [BEH-UDP]에서 정의됩니다:

        NAT는 동일한 내부 IP 주소 및 포트(X:x)에서 외부 IP 주소 및 포트로 전송되는 후속
        패킷에 대해 포트 매핑을 재사용합니다.

2.4.  Endpoint-Dependent Mapping

   "Endpoint-Dependent Mapping"은 [BEH-UDP]에 정의된 "Address Dependent
   Mapping"와 "Address and Port-Dependent Mapping"의 조합을 나타냅니다.

   Address-Dependent Mapping

        NAT는 외부 포트에 관계없이 동일한 내부 IP 주소 및 포트(X:x)에서 동일한 외부 IP
        주소로 전송되는 후속 패킷에 대해 포트 매핑을 재사용합니다.

   Address and Port-Dependent Mapping

        NAT는 매핑이 여전히 활성 상태인 동안 동일한 내부 IP 주소 및 포트(X:x)에서 동일한
        외부 IP 주소 및 포트로 전송되는 후속 패킷에 대해 포트 매핑을 재사용합니다.

2.5.  Endpoint-Independent Filtering

   "Endpoint-Independent Filtering"은 다음과 같이 [BEH-UDP]에서 정의됩니다:

        NAT는 외부 IP 주소 및 포트 소스(Z:z)에 관계없이 내부 주소 및 포트 X:x로 향하지
        않는 패킷만 필터링합니다. NAT는 X:x로 향하는 모든 패킷을 전달합니다. 즉, NAT의
        내부에서 외부 IP 주소로 패킷을 보내는 것만으로도 모든 패킷이 내부 엔드포인트로
        되돌아가도록 허용하기에 충분합니다.

   "Endpoint-Independent Mapping"과 "Endpoint-Independent Filtering"의
   조합을 사용하는 NAT 장치는 공용 네트워크의 모든 외부 끝점에서 매핑된 공용 포트로
   들어오는 트래픽을 허용합니다.

2.6.  Endpoint-Dependent Filtering

   "Endpoint-Dependent Filtering"은 [BEH-UDP]에서 정의된 "Address Dependent
   Filtering"과 "Address and Port-Dependent Filtering"의 조합을 나타냅니다.

   Address-Dependent Filtering

        NAT는 내부 주소 X:x로 향하지 않는 패킷을 필터링합니다. 또한 NAT는 X:x가 이전에
        Y:any로 패킷을 전송하지 않은 경우 내부 끝점 X:x로 향하는 Y:y의 패킷을
        필터링합니다(Y에서 사용하는 포트와 무관). 즉, 특정 외부 종단점으로부터 패킷을
        수신하기 위해서는 내부 종단점이 특정 외부 종단점의 IP 주소로 먼저 패킷을 보내야
        합니다.

   Address and Port-Dependent Filtering

        NAT는 내부 주소 X:x로 향하지 않는 패킷을 필터링합니다. 또한 NAT는 X:x가 이전에
        Y:y로 패킷을 보내지 않은 경우 내부 엔드포인트 X:x로 향하는 Y:y의 패킷을
        필터링합니다. 즉, 특정 외부 종단점으로부터 패킷을 받기 위해서는 내부 종단점이 먼저
        그 외부 종단점의 IP 주소와 포트로 패킷을 보내야 합니다.

   "Endpoint-Dependent Filtering"을 사용하는 NAT 장치는 공용 네트워크의 제한된 외부
   끝점 집합에서 매핑된 공용 포트로 들어오는 트래픽만 허용합니다.

2.7.  P2P Application (P2P 애플리케이션)

   P2P 애플리케이션은 동일한 엔드포인트를 사용하여 피어링 호스트로 나가는 세션을 시작하고
   피어링 호스트에서 들어오는 세션을 수락하는 애플리케이션입니다. P2P 애플리케이션은 P2P
   통신을 위해 여러 엔드포인트를 사용할 수 있습니다.

2.8.  NAT-Friendly P2P Application (NAT 친화적 P2P 애플리케이션)

   NAT 친화적인 P2P 애플리케이션은 피어링 노드가 하나 이상의 NAT로 연결된 개별 IP 주소
   영역에 있는 경우에도 효과적으로 작동하도록 설계된 P2P 애플리케이션입니다.

   P2P 애플리케이션이 피어링 세션을 설정하고 NAT 친화적인 상태를 유지하는 일반적인 방법 중
   하나는 등록 및 피어 검색 목적으로 공개 주소 지정이 가능한 랑데뷰 서버를 사용하는 것입니다.

2.9. Endpoint-Independent Mapping NAT (EIM-NAT)

   Endpoint-Independent Mapping NAT (EIM-NAT)는 엔드포인트 독립 매핑을 사용하는
   NAT 장치입니다. EIM-NAT는 모든 유형의 필터링 동작을 가질 수 있습니다. BEHAVE 호환
   NAT 장치는 EIM-NAT 장치의 좋은 예입니다. 주소 종속 매핑을 사용하는 NAT 장치는
   EIM-NAT가 아닌 NAT 장치의 예입니다.

2.10.  Hairpinning (헤어피닝)

   Hairpinning은 [BEH-UDP]에서 다음과 같이 정의됩니다:

        두 호스트(X1 및 X2라고 함)가 동일한 NAT 뒤에 있고 트래픽을 교환하는 경우 NAT는
        X2':x2'라고 하는 X2의 NAT 외부에 주소를 할당할 수 있습니다. X1이 트래픽을
        X2':x2'로 보내면 트래픽은 X1에서 X2로 릴레이해야 하는 NAT로 이동합니다. 이것을
        Hairpinning이라고 합니다.

   현재 배포된 모든 NAT가 Hairpinning을 지원하는 것은 아닙니다.

3.  Techniques Used by P2P Applications to Traverse NATs (NAT 통과를 위해 P2P 애플리케이션에서 사용하는 기술)

   이 섹션에서는 응용 프로그램 또는 프로토콜 설계자의 관점에서 기존 NAT 장치를 통해
   peer-to-peer 통신을 구현하기 위해 현재 알려진 기술을 자세히 검토합니다.

3.1.  Relaying (중계)

   NAT 장치가 있는 상태에서 peer-to-peer 통신을 구현하는 가장 안정적이지만 가장 비효율적인
   방법은 peer-to-peer 통신을 릴레이를 통한 클라이언트/서버 통신처럼 네트워크에 보이게
   만드는 것입니다. 그림 1의 시나리오를 고려하십시오. 두 클라이언트 호스트 A와 B는 각각 잘
   알려진 랑데뷰 서버 S에 대한 TCP 또는 UDP 연결을 시작했습니다. 랑데뷰 서버 S는 공인 주소
   지정이 가능한 IP 주소를 가지며 등록, 검색 및 릴레이 목적으로 사용됩니다. NAT 뒤의 호스트는
   서버에 등록됩니다. 피어 호스트는 NAT 뒤에 있는 호스트를 검색하고 서버를 사용하여 모든
   end-to-end 메시지를 릴레이할 수 있습니다. 클라이언트는 별도의 사설 네트워크에 상주하며
   각각의 NAT 장치는 클라이언트가 다른 클라이언트에 직접 연결을 시작하지 못하도록 합니다.

                           Registry, Discovery
                           Combined with Relay
                                 Server S
                            192.0.2.128:20001
                                     |
        +----------------------------+----------------------------+
        | ^ Registry/              ^   ^ Registry/              ^ |
        | | Relay-Req Session(A-S) |   | Relay-Req Session(B-S) | |
        | | 192.0.2.128:20001      |   |  192.0.2.128:20001     | |
        | | 192.0.2.1:62000        |   |  192.0.2.254:31000     | |
        |                                                         |
      +--------------+                                 +--------------+
      | 192.0.2.1    |                                 | 192.0.2.254  |
      |              |                                 |              |
      |    NAT A     |                                 |    NAT B     |
      +--------------+                                 +--------------+
        |                                                         |
        | ^ Registry/              ^   ^ Registry/              ^ |
        | | Relay-Req Session(A-S) |   | Relay-Req Session(B-S) | |
        | |  192.0.2.128:20001     |   |  192.0.2.128:20001     | |
        | |     10.0.0.1:1234      |   |     10.1.1.3:1234      | |
        |                                                         |
     Client A                                                 Client B
     10.0.0.1:1234                                        10.1.1.3:1234

                     그림 1: 릴레이 서버를 사용하여 피어와 통신

   직접 연결을 시도하는 대신 두 클라이언트는 서버 S를 사용하여 메시지를 릴레이할 수 있습니다.
   예를 들어 클라이언트 B에게 메시지를 보내기 위해 클라이언트 A는 이미 설정된 클라이언트/서버
   연결을 따라 서버 S로 메시지를 보내고 서버 S는 B와의 기존 클라이언트/서버 연결을 사용하여
   클라이언트 B로 메시지를 보냅니다.

   이 방법은 두 클라이언트가 서버에 연결되어 있는 한 항상 작동한다는 장점이 있습니다. 도중
   NAT 장치는 EIM-NAT일 필요가 없습니다. 릴레이의 명백한 단점은 서버의 처리 능력과
   네트워크 대역폭을 소모하고 서버가 충분한 I/O 대역폭을 가지고 있고 토폴로지 측면에서 올바른
   위치에 있더라도 피어링 클라이언트 간의 통신 대기 시간이 증가할 가능성이 있다는 것입니다.
   TURN 프로토콜[TURN]은 상대적으로 안전한 방식으로 응용 프로그램에 구애받지 않는 세션 지향
   패킷 릴레이를 구현하는 방법을 정의합니다.

3.2.  Connection Reversal (연결 반전)

   직접 통신을 위한 다음 연결 반전 기술은 피어 중 하나가 NAT 장치 뒤에 있고 다른 하나는
   그렇지 않은 경우에만 작동합니다. 예를 들어 그림 2의 시나리오를 고려하십시오. 클라이언트
   A는 NAT 뒤에 있지만 클라이언트 B는 공인 주소 지정이 가능한 IP 주소를 가지고 있습니다.
   Rendezvous Server S에는 공인 주소 지정이 가능한 IP 주소가 있으며 등록 및 검색
   목적으로 사용됩니다. NAT 뒤의 호스트는 엔드포인트를 서버에 등록합니다. 피어 호스트는 서버를
   사용하여 NAT 뒤에 있는 호스트의 엔드포인트를 검색합니다.

                          Registry and Discovery
                                 Server S
                            192.0.2.128:20001
                                     |
        +----------------------------+----------------------------+
        | ^ Registry Session(A-S) ^     ^ Registry Session(B-S) ^ |
        | | 192.0.2.128:20001     |     |  192.0.2.128:20001    | |
        | | 192.0.2.1:62000       |     |  192.0.2.254:1234     | |
        |                                                         |
        | ^ P2P Session (A-B)     ^     |  P2P Session (B-A)    | |
        | | 192.0.2.254:1234      |     |  192.0.2.1:62000      | |
        | | 192.0.2.1:62000       |     v  192.0.2.254:1234     v |
        |                                                         |
      +--------------+                                            |
      | 192.0.2.1    |                                            |
      |              |                                            |
      |    NAT A     |                                            |
      +--------------+                                            |
        |                                                         |
        | ^ Registry Session(A-S) ^                               |
        | |  192.0.2.128:20001    |                               |
        | |     10.0.0.1:1234     |                               |
        |                                                         |
        | ^ P2P Session (A-B)     ^                               |
        | |  192.0.2.254:1234     |                               |
        | |     10.0.0.1:1234     |                               |
        |                                                         |
     Private Client A                                 Public Client B
     10.0.0.1:1234                                    192.0.2.254:1234

                  그림 2: Rendezvous 서버를 사용한 연결 반전

   클라이언트 A는 사설 IP 주소 10.0.0.1을 가지고 있으며 응용 프로그램은 TCP 포트 1234를
   사용하고 있습니다. 이 클라이언트는 공인 IP 주소 192.0.2.128 및 포트 20001에서
   서버 S와 연결을 설정했습니다. NAT A는 자신의 공인 IP 주소 192.0.2.1에서 TCP 포트
   62000을 할당하여 A와 S의 세션에 대한 임시 공용 엔드포인트 주소로 사용했습니다. 따라서
   서버 S는 클라이언트 A가 포트 62000을 사용하는 IP 주소 192.0.2.1에 있다고 믿습니다.
   그러나 클라이언트 B는 고유한 영구 IP 주소 192.0.2.254를 가지며 B의 응용 프로그램은
   포트 1234에서 TCP 연결을 수락합니다.

   이제 클라이언트 B가 클라이언트 A와 직접 통신 세션을 설정하려고 한다고 가정합니다. B는 먼저
   클라이언트 A가 자신이 가지고 있다고 믿는 주소(즉, 10.0.0.1:1234) 또는 서버 S가 관찰한
   A의 주소(즉, 192.0.2.1:62000)에서 클라이언트 A에 접속을 시도할 수 있습니다. 두 경우
   모두 연결이 실패합니다. 첫 번째 경우 10.0.0.1은 공개적으로 라우팅할 수 있는 IP 주소가
   아니기 때문에 IP 주소 10.0.0.1로 향하는 트래픽은 네트워크에서 단순히 삭제됩니다. 두 번째
   경우 B의 TCP SYN 요청은 포트 62000으로 지정된 NAT A에 도착하지만 나가는 연결만
   허용되기 때문에 NAT A는 연결 요청을 거부합니다.

   A에 대한 직접 연결 설정을 시도하고 실패한 후 클라이언트 B는 서버 S를 사용하여 클라이언트
   A에 대한 요청을 릴레이하여 클라이언트 B에 대한 "역방향" 연결을 시작할 수 있습니다.
   클라이언트 A는 S를 통해 이 릴레이된 요청을 수신하면 B의 공인 IP 주소 및 포트 번호에서
   클라이언트 B에 대한 TCP 연결을 엽니다. NAT A는 방화벽 내부에서 시작되기 때문에 연결
   진행을 허용하고 클라이언트 B는 NAT 장치 뒤에 있지 않기 때문에 연결을 수신할 수 있습니다.

   현재 다양한 peer-to-peer 애플리케이션이 이 기술을 구현합니다. 물론 주요 제한 사항은 통신
   피어 중 하나만 NAT 장치 뒤에 있는 경우에만 작동한다는 것입니다. NAT 장치가 EIM-NAT인
   경우 퍼블릭 클라이언트는 외부 서버 S에 연결하여 클라이언트-A에서 시작된 연결을 예상하고 해당
   엔드포인트의 연결을 허용할 특정 공인 엔드포인트를 결정할 수 있습니다. NAT 장치가 EIM-NAT인
   경우 퍼블릭 클라이언트는 외부 서버 S에 연결하여 클라이언트 A에서 시작된 연결을 예상하고 해당
   엔드포인트로부터의 연결을 허용할 특정 공인 엔드포인트를 결정할 수 있습니다. NAT 장치가
   EIM-NAT가 아닌 경우 퍼블릭 클라이언트는 클라이언트 A에서 시작된 연결을 예상하는 공인 퍼블릭
   엔드포인트를 알 수 없습니다. 두 피어가 모두 NAT 뒤에 있을 수 있는 점점 더 일반적인 경우에
   연결 반전 방법이 실패합니다. 연결 반전은 P2P 연결 문제에 대한 일반적인 해결책이 아닙니다.
   "정방향" 또는 "역방향" 연결을 설정할 수 없는 경우 응용 프로그램은 종종 릴레이와 같은 다른
   메커니즘으로 대체됩니다.

3.3.  UDP Hole Punching (UDP 홀 펀칭)

   UDP 홀 펀칭은 EIM-NAT의 속성에 의존하여 적절하게 설계된 P2P 애플리케이션이 NAT 장치를
   통해 "구멍을 뚫고" 서로 간에 직접 연결을 설정할 수 있도록 합니다. 호스트 중 하나가
   EIM-NAT가 아닌 NAT 뒤에 있는 경우 피어링 호스트는 연결을 시작할 매핑된 엔드포인트를
   예측할 수 없습니다. 또한 비 EIM-NAT 뒤에 있는 호스트의 애플리케이션은 다른 외부 대상과의
   통신을 위해 이미 설정된 끝점 매핑을 재사용할 수 없으며 홀 펀칭 기술이 실패합니다.

   이 기술은 RFC 3027 [NAT-PROT]의 섹션 5.1에서 간략하게 언급되었으며 [KEGEL]에서
   처음 설명되었으며 일부 최근 프로토콜 [TEREDO, ICE]에서 사용되었습니다. "TCP 홀 펀칭"에
   대한 자세한 내용은 섹션 3.4를 참조하십시오.

   우리는 두 가지 특정 시나리오와 두 시나리오를 정상적으로 처리하도록 애플리케이션을 설계하는
   방법을 고려할 것입니다. 일반적인 경우를 나타내는 첫 번째 상황에서 직접 P2P 통신을 원하는 두
   클라이언트가 두 개의 서로 다른 NAT 뒤에 상주합니다. 두 번째에서 두 클라이언트는 실제로
   동일한 NAT 뒤에 상주하지만 반드시 알 필요는 없습니다.

3.3.1.  Peers behind Different NATs (다른 NAT 뒤의 피어)

   그림 3의 시나리오를 고려하십시오. 클라이언트 A와 B는 둘 다 사설 IP 주소를 가지고 있으며
   서로 다른 NAT 장치 뒤에 있습니다. Rendezvous Server S는 공개적으로 주소를 지정할 수
   있는 IP 주소를 가지며 등록, 검색 및 제한된 릴레이 목적으로 사용됩니다. NAT 뒤의 호스트는
   공인 엔드포인트를 서버에 등록합니다. 피어 호스트는 서버를 사용하여 NAT 뒤에 있는 호스트의
   공인 엔드포인트를 검색합니다. 섹션 3.1과 달리 피어 호스트는 서버를 사용하여 종단 간 메시지
   대신 연결 시작 제어 메시지만 중계합니다.

   클라이언트 A와 B에서 실행 중인 P2P 애플리케이션은 UDP 포트 1234를 사용합니다. 랑데부
   서버 S는 UDP 포트 20001을 사용합니다. A와 B는 각각 서버 S와의 UDP 통신 세션을
   시작하여 NAT A가 자체 공인 UDP 포트를 할당하도록 합니다. A와 S의 세션에 대해 62000,
   NAT B가 포트 31000을 S와 B의 세션에 각각 할당하도록 합니다.

                      Registry and Discovery Combined
                            with Limited Relay
                                 Server S
                             192.0.2.128:20001
                                     |
        +----------------------------+----------------------------+
        | ^ Registry Session(A-S) ^     ^ Registry Session(B-S) ^ |
        | | 192.0.2.128:20001     |     |  192.0.2.128:20001    | |
        | | 192.0.2.1:62000       |     |  192.0.2.254:31000    | |
        |                                                         |
        | ^ P2P Session (A-B)     ^     ^  P2P Session (B-A)    ^ |
        | | 192.0.2.254:31000     |     |  192.0.2.1:62000      | |
        | | 192.0.2.1:62000       |     |  192.0.2.254:31000    | |
        |                                                         |
      +--------------+                                 +--------------+
      | 192.0.2.1    |                                 | 192.0.2.254  |
      |              |                                 |              |
      | EIM-NAT A    |                                 | EIM-NAT B    |
      +--------------+                                 +--------------+
        |                                                         |
        | ^ Registry Session(A-S) ^     ^ Registry Session(B-S) ^ |
        | |  192.0.2.128:20001    |     |  192.0.2.128:20001    | |
        | |     10.0.0.1:1234     |     |     10.1.1.3:1234     | |
        |                                                         |
        | ^ P2P Session (A-B)     ^     ^  P2P Session (B-A)    ^ |
        | |  192.0.2.254:31000    |     |  192.0.2.1:62000      | |
        | |     10.0.0.1:1234     |     |     10.1.1.3:1234     | |
        |                                                         |
     Client A                                                 Client B
     10.0.0.1:1234                                        10.1.1.3:1234

                     그림 3: 직접 연결을 설정하기 위한 UDP 홀 펀칭

   이제 클라이언트 A가 클라이언트 B와 직접 UDP 통신 세션을 설정하려고 한다고 가정해
   보겠습니다. A가 단순히 UDP 메시지를 B의 공인 엔드포인트 192.0.2.254:31000으로 보내기
   시작하면 NAT B는 일반적으로 이러한 들어오는 메시지를 버립니다(엔드포인트 독립적 필터링을
   사용하지 않는 한). 소스 주소와 포트 번호가 원래 나가는 세션이 설정된 S의 주소와 일치하지 않기
   때문입니다. 마찬가지로 B가 UDP 메시지를 A의 공인 엔드포인트로 보내기 시작하면 NAT A는
   일반적으로 이러한 메시지를 버립니다.

   A가 B의 공인 엔드포인트로 UDP 메시지를 보내기 시작하고 동시에 서버 S를 통해 B로 요청을
   릴레이하여 B에게 A의 공인 엔드포인트로 UDP 메시지를 보내도록 요청한다고 가정합니다. B의 공인
   엔드포인트(192.0.2.254:31000)로 향하는 A의 발신 메시지는 EIM-NAT A가 A의 사설
   엔드포인트와 B의 공인 엔드포인트 간에 새로운 통신 세션을 열도록 합니다. 동시에 A의 공인
   엔드포인트(192.0.2.1:62000)에 대한 B의 메시지는 EIM-NAT B가 B의 사설 엔드포인트와 A의
   공인 엔드포인트 간에 새로운 통신 세션을 열도록 합니다. 새로운 UDP 세션이 각 방향으로 열리면
   클라이언트 A와 B는 서버 S에 추가 부담 없이 서로 직접 통신할 수 있습니다. 피어 호스트에 대한
   "소개" 서버와 같습니다.

   UDP 홀 펀칭 기술에는 몇 가지 유용한 속성이 있습니다. NAT 장치 뒤에 있는 두 클라이언트
   사이에 직접 P2P UDP 연결이 설정되면 해당 연결의 어느 쪽이든 "소개자"의 역할을 대신할 수
   있고 상대방이 추가로 P2P 연결을 설정하도록 도울 수 있습니다. 초기 도입 서버 S의 부하를
   최소화합니다. 애플리케이션은 뒤에 있는 NAT 장치의 종류를 감지하려고 시도할 필요가 없습니다.
   위의 절차는 클라이언트 중 하나 또는 둘 모두가 NAT 장치 뒤에 있지 않은 경우 동등하게 
   peer-to-peer 통신 채널을 설정하기 때문입니다. UDP 홀 펀칭 기술은 하나 또는 두 개의
   클라이언트가 둘 이상의 주소 변환 수준을 통해 공인 인터넷에서 멀리 떨어져 있는 다중 NAT에서도
   자동으로 작동합니다.

3.3.2.  Peers behind the Same NAT (동일한 NAT 뒤에 있는 피어)

   이제 그림 4와 같이 두 클라이언트(아마도 무의식적으로)가 동일한 EIM-NAT 뒤에 상주하여 동일한
   사설 IP 주소 공간에 있는 시나리오를 고려하십시오. 잘 알려진 Rendezvous Server S는
   공개적으로 주소 지정이 가능한 IP 주소이며 등록, 검색 및 제한된 릴레이 목적으로 사용됩니다.
   NAT 뒤의 호스트는 서버에 등록됩니다. 피어 호스트는 서버를 사용하여 NAT 뒤에 있는 호스트를
   발견하고 서버를 사용하여 메시지를 릴레이합니다. 섹션 3.1과 달리 피어 호스트는 서버를 사용하여
   모든 종단 간 메시지 대신 제어 메시지만 중계합니다.

   클라이언트 A는 공통 EIM-NAT가 공인 포트 번호 62000을 할당한 서버 S와 UDP 세션을
   설정했습니다. 클라이언트 B는 유사하게 EIM-NAT가 공인 포트 번호 62001을 할당한 S와 세션을
   설정했습니다.

                     Registry and Discovery Combined
                           with Limited Relay
                                Server S
                            192.0.2.128:20001
                                    |
         ^ Registry Session(A-S) ^  | ^ Registry Session(B-S) ^
         | 192.0.2.128:20001     |  | |  192.0.2.128:20001    |
         | 192.0.2.1:62000       |  | |  192.0.2.1:62001      |
                                    |
                             +--------------+
                             | 192.0.2.1    |
                             |              |
                             |   EIM-NAT    |
                             +--------------+
                                    |
      +-----------------------------+----------------------------+
      | ^ Registry Session(A-S) ^      ^ Registry Session(B-S) ^ |
      | |  192.0.2.128:20001    |      |  192.0.2.128:20001    | |
      | |     10.0.0.1:1234     |      |     10.1.1.3:1234     | |
      |                                                          |
      | ^ P2P Session-try1(A-B) ^      ^ P2P Session-try1(B-A) ^ |
      | | 192.0.2.1:62001       |      |  192.0.2.1:62000      | |
      | |     10.0.0.1:1234     |      |     10.1.1.3:1234     | |
      |                                                          |
      | ^ P2P Session-try2(A-B) ^      ^ P2P Session-try2(B-A) ^ |
      | |     10.1.1.3:1234     |      |     10.0.0.1:1234     | |
      | |     10.0.0.1:1234     |      |     10.1.1.3:1234     | |
      |                                                          |
   Client A                                                   Client B
   10.0.0.1:1234                                         10.1.1.3:1234

   그림 4: 피어와 통신하기 위한 로컬 및 공인 엔드포인트 사용

   A와 B가 위에서 설명한 UDP 홀 펀칭 기술을 사용하여 서버 S를 소개자로 사용하여 통신 채널을
   설정한다고 가정합니다. 그런 다음 A와 B는 서버 S에서 관찰한 대로 서로의 공인 엔드포인트를
   학습하고 해당 공인 엔드포인트에서 서로에게 메시지를 보내기 시작합니다. 두 클라이언트는
   NAT가 내부 네트워크의 호스트가 외부 호스트뿐만 아니라 다른 내부 호스트와 변환된 UDP 세션을
   열 수 있도록 허용하는 한 이러한 방식으로 서로 통신할 수 있습니다. 이러한 상황을 "헤어피닝
   (Hairpinning)"이라고 합니다. 사설망에서 NAT에 도착한 패킷이 변환된 후 공중망으로
   전달되지 않고 사설망으로 루프백되기 때문입니다.

   예를 들어 위의 P2P session-try1을 고려하십시오. A가 UDP 패킷을 B의 공인 엔드포인트로
   보낼 때 패킷은 처음에 소스 엔드포인트가 10.0.0.1:1234이고 대상 엔드포인트가
   192.0.2.1:62001입니다. NAT는 이 패킷을 수신하고 소스 엔드포인트가
   192.0.2.1:62000이고 대상 엔드포인트가 10.1.1.3:1234인 것으로 변환한 다음 B로
   전달합니다.

   NAT 장치가 헤어피닝을 지원하더라도 이 변환 및 전달 단계는 이 상황에서 분명히 불필요하며
   NAT에 부담을 주는 것 외에도 A와 B 간의 대화에 대기 시간을 추가합니다. 이 문제에 대한
   해결책은 간단하며 다음과 같이 설명됩니다.

   A와 B가 처음에 Rendezvous 서버 S를 통해 주소 정보를 교환할 때 자신이 "관찰한" IP
   주소와 포트 번호는 물론 S가 관찰한 공인 엔드포인트도 포함합니다. 그런 다음 클라이언트는
   동시에 각 서버에 패킷을 보내기 시작합니다. 알고 있는 각각의 대체 주소에서 다른 주소를
   선택하고 성공적인 통신으로 연결되는 첫 번째 주소를 사용합니다. 위의 그림 4와 같이 두
   클라이언트가 동일한 NAT 뒤에 있는 경우 사설 엔드포인트로 향하는 패킷(P2P session-try
   를 사용하여 시도한 것처럼)이 먼저 도착할 가능성이 높으므로 NAT를 포함하지 않는 직접 통신
   채널이 생성됩니다. 두 클라이언트가 서로 다른 NAT 뒤에 있는 경우 사설 엔드포인트로 향하는
   패킷은 서로에게 전혀 도달하지 못하지만 클라이언트는 각자의 공인 엔드포인트를 사용하여 연결을
   설정하기를 바랍니다. 그러나 NAT가 서로 다른 경우 B의 사설 엔드포인트로 향하는 A의 메시지가
   A의 사설 네트워크에서 관련 없는 다른 노드에 도달하거나 그 반대의 경우가 전적으로 가능하기
   때문에 이러한 패킷이 어떤 식으로든 인증되는 것이 중요합니다.

   [ICE] 프로토콜은 제안/응답 교환 중에 피어링 엔드 호스트 간에 여러 후보 엔드포인트(사설 및
   공인 모두)가 통신한다는 점에서 이 기술을 효과적으로 사용합니다. 가장 효율적인 종단 간 연결을
   제공하는 엔드포인트는 결국 종단 간 데이터 전송을 위해 선택됩니다.

3.3.3.  Peers Separated by Multiple NATs (여러 NAT로 분리된 피어)

   여러 NAT 장치가 포함된 일부 토폴로지에서는 두 클라이언트가 토폴로지에 대한 특정 지식 없이
   그들 사이에 "최적" P2P 경로를 설정하는 것이 불가능합니다. 예를 들어 그림 5의 시나리오를
   고려하십시오.

                     Registry and Discovery Combined
                           with Limited Relay
                                Server S
                           192.0.2.128:20001
                                   |
         ^ Registry Session(A-S) ^ | ^ Registry Session(B-S) ^
         | 192.0.2.128:20001     | | | 192.0.2.128:20001     |
         | 192.0.2.1:62000       | | | 192.0.2.1:62001       |
                                   |
                            +--------------+
                            | 192.0.2.1    |
                            |              |
                            |  EIM-NAT X   |
                            | (Supporting  |
                            | Hairpinning) |
                            +--------------+
                                   |
      +----------------------------+----------------------------+
      | ^ Registry Session(A-S) ^     ^ Registry Session(B-S) ^ |
      | |  192.0.2.128:20001    |     |  192.0.2.128:20001    | |
      | |  192.168.1.1:30000    |     |  192.168.1.2:31000    | |
      |                                                         |
      | ^ P2P Session (A-B)     ^     ^ P2P Session (B-A)     ^ |
      | |  192.0.2.1:62001      |     |  192.0.2.1:62000      | |
      | |  192.168.1.1:30000    |     |  192.168.1.2:31000    | |
      |                                                         |
   +--------------+                                  +--------------+
   | 192.168.1.1  |                                  | 192.168.1.2  |
   |              |                                  |              |
   | EIM-NAT A    |                                  | EIM-NAT B    |
   +--------------+                                  +--------------+
       |                                                        |
       | ^ Registry Session(A-S) ^    ^ Registry Session(B-S) ^ |
       | |  192.0.2.128:20001    |    |  192.0.2.128:20001    | |
       | |     10.0.0.1:1234     |    |     10.1.1.3:1234     | |
       |                                                        |
       | ^ P2P Session (A-B)     ^    ^  P2P Session (B-A)    ^ |
       | |  192.0.2.1:62001      |    |  192.0.2.1:62000      | |
       | |     10.0.0.1:1234     |    |     10.1.1.3:1234     | |
       |                                                        |
   Client A                                                  Client B
   10.0.0.1:1234                                        10.1.1.3:1234

      그림 5: 직접 통신 설정에서 Hairpinning 사용

   NAT X가 다수의 고객을 몇 개의 공용 IP 주소로 멀티플렉싱하기 위해 대규모 인터넷 서비스
   공급자(ISP)에 의해 배포된 EIM-NAT이고 NAT A와 B가 두 ISP 고객이 독립적으로 배포한
   소규모 소비자 NAT 게이트웨이라고 가정합니다. 사설 홈 네트워크를 각각의 ISP 제공 IP 주소에
   연결합니다. 서버 S와 NAT X에만 전역적으로 라우팅 가능한 IP 주소가 있습니다. NAT A와
   NAT B에서 사용하는 "공인" IP 주소는 실제로 ISP의 주소 지정 영역에 사적인 반면 클라이언트
   A와 B의 주소는 각각 NAT A와 B의 주소 지정 영역에 사설입니다. 이전 섹션에서와 마찬가지로
   서버 S는 등록, 검색 및 제한 릴레이 목적으로 사용됩니다. 피어 호스트는 모든 종단 간 메시지
   대신 서버를 사용하여 연결 시작 제어 메시지를 릴레이합니다.

   이제 클라이언트 A와 B가 직접 P2P UDP 연결을 설정하려고 시도한다고 가정합니다. 최적의
   방법은 클라이언트 A가 ISP의 주소 지정 영역에서 NAT B에 있는 클라이언트 B의 공인 주소
   (192.168.1.2:31000)로 메시지를 보내고 클라이언트 B가 NAT B에 있는 A의 공용 주소, 즉
   192.168.1.1:30000로 메시지를 보내는 것입니다. 불행하게도 A와 B는 이러한 주소를 알 수
   있는 방법이 없습니다. 왜냐하면 서버 S는 클라이언트의 "전역" 공인 엔드포인트인
   192.0.2.1:62000 및 192.0.2.1:62001만 보기 때문입니다. A와 B가 이러한 주소를 알 수
   있는 방법이 있더라도 ISP의 사설 주소 지정 영역의 주소 할당이 클라이언트의 사설 영역의
   관련되지 않은 주소 할당과 충돌할 수 있기 때문에 여전히 사용할 수 있다는 보장이 없습니다.
   따라서 클라이언트는 P2P 통신을 위해 S에서 볼 수 있는 글로벌 공인 엔드포인트를 사용하고
   NAT X를 사용하여 Hairpinning을 제공할 수밖에 없습니다.

3.4.  TCP Hole Punching

   In this section, we will discuss the "TCP hole punching" technique
   used for establishing direct TCP connection between a pair of nodes
   that are both behind EIM-NAT devices.  Just as with UDP hole
   punching, TCP hole punching relies on the properties of EIM-NATs to
   allow appropriately designed peer-to-peer applications to "punch
   holes" through the NAT device and establish direct connectivity with
   each other, even when both communicating hosts lie behind NAT
   devices.  This technique is also known sometimes as "Simultaneous TCP
   Open".

   Most TCP sessions start with one endpoint sending a SYN packet, to
   which the other party responds with a SYN-ACK packet.  It is
   permissible, however, for two endpoints to start a TCP session by
   simultaneously sending each other SYN packets, to which each party
   subsequently responds with a separate ACK.  This procedure is known
   as "Simultaneous TCP Open" technique and may be found in figure 6 of
   the original TCP specification ([TCP]).  However, "Simultaneous TCP
   Open" is not implemented correctly on many systems, including NAT
   devices.

   If a NAT device receives a TCP SYN packet from outside the private
   network attempting to initiate an incoming TCP connection, the NAT
   device will normally reject the connection attempt by either dropping
   the SYN packet or sending back a TCP RST (connection reset) packet.
   In the case of SYN timeout or connection reset, the application
   endpoint will continue to resend a SYN packet, until the peer does
   the same from its end.

   Let us consider the case where a NAT device supports "Simultaneous
   TCP Open" sessions.  When a SYN packet arrives with source and
   destination endpoints that correspond to a TCP session that the NAT
   device believes is already active, then the NAT device would allow
   the packet to pass through.  In particular, if the NAT device has
   just recently seen and transmitted an outgoing SYN packet with the
   same address and port numbers, then it will consider the session
   active and allow the incoming SYN through.  If clients A and B can
   each initiate an outgoing TCP connection with the other client timed
   so that each client's outgoing SYN passes through its local NAT
   device before either SYN reaches the opposite NAT device, then a
   working peer-to-peer TCP connection will result.

   This technique may not always work reliably for the following
   reason(s).  If either node's SYN packet arrives at the remote NAT
   device too quickly (before the peering node had a chance to send the
   SYN packet), then the remote NAT device may either drop the SYN
   packet or reject the SYN with a RST packet.  This could cause the
   local NAT device in turn to close the new NAT session immediately or
   initiate end-of-session timeout (refer to Section 2.6 of [NAT-TERM])
   so as to close the NAT session at the end of the timeout.  Even as
   both peering nodes simultaneously initiate continued SYN
   retransmission attempts, some remote NAT devices might not let the
   incoming SYNs through if the NAT session is in an end-of-session
   timeout state.  This in turn would prevent the TCP connection from
   being established.

   In reality, the majority of NAT devices (more than 50%) support
   Endpoint-Independent Mapping and do not send ICMP errors or RSTs in
   response to unsolicited incoming SYNs.  As a result, the Simultaneous
   TCP Open technique does work across NAT devices in the majority of
   TCP connection attempts ([P2P-NAT], [TCP-CHARACT]).

3.5.  UDP Port Number Prediction

   A variant of the UDP hole punching technique exists that allows
   peer-to-peer UDP sessions to be created in the presence of some NATs
   implementing Endpoint-Dependent Mapping.  This method is sometimes
   called the "N+1" technique [BIDIR] and is explored in detail by
   Takeda [SYM-STUN].  The method works by analyzing the behavior of the
   NAT and attempting to predict the public port numbers it will assign
   to future sessions.  The public ports assigned are often predictable
   because most NATs assign mapping ports in sequence.

   Consider the scenario in figure 6.  Two clients, A and B, each behind
   a separate NAT, have established separate UDP connections with
   rendezvous server S.  Rendezvous server S has a publicly addressable
   IP address and is used for the purposes of registration and
   discovery.  Hosts behind a NAT register their endpoints with the
   server.  Peer hosts discover endpoints of the hosts behind NAT using
   the server.

                          Registry and Discovery
                                 Server S
                             192.0.2.128:20001
                                     |
                                     |
        +----------------------------+----------------------------+
        | ^ Registry Session(A-S) ^     ^ Registry Session(B-S) ^ |
        | | 192.0.2.128:20001     |     |  192.0.2.128:20001    | |
        | | 192.0.2.1:62000       |     |  192.0.2.254:31000    | |
        |                                                         |
        | ^ P2P Session (A-B)     ^     ^  P2P Session (B-A)    ^ |
        | | 192.0.2.254:31001     |     |  192.0.2.1:62001      | |
        | | 192.0.2.1:62001       |     |  192.0.2.254:31001    | |
        |                                                         |
   +---------------------+                       +--------------------+
   | 192.0.2.1           |                       |        192.0.2.254 |
   |                     |                       |                    |
   |    NAT A            |                       |        NAT B       |
   | (Endpoint-Dependent |                       | (Endpoint-Dependent|
   |  Mapping)           |                       |  Mapping)          |
   +---------------------+                       +--------------------+
        |                                                         |
        | ^ Registry Session(A-S) ^     ^ Registry Session(B-S) ^ |
        | |  192.0.2.128:20001    |     |  192.0.2.128:20001    | |
        | |     10.0.0.1:1234     |     |     10.1.1.3:1234     | |
        |                                                         |
        | ^ P2P Session (A-B)     ^     ^ P2P Session (B-A)     ^ |
        | |  192.0.2.254:31001    |     |  192.0.2.1:62001      | |
        | |     10.0.0.1:1234     |     |     10.1.1.3:1234     | |
        |                                                         |
     Client A                                                 Client B
     10.0.0.1:1234                                        10.1.1.3:1234

        Figure 6: UDP Port Prediction to set up direct connectivity

   NAT A has assigned its UDP port 62000 to the communication session
   between A and S, and NAT B has assigned its port 31000 to the session
   between B and S.  By communicating with server S, A and B learn each
   other's public endpoints as observed by S.  Client A now starts
   sending UDP messages to port 31001 at address 192.0.2.254 (note the
   port number increment), and client B simultaneously starts sending
   messages to port 62001 at address 192.0.2.1.  If NATs A and B assign
   port numbers to new sessions sequentially, and if not much time has
   passed since the A-S and B-S sessions were initiated, then a working
   bidirectional communication channel between A and B should result.
   A's messages to B cause NAT A to open up a new session, to which NAT
   A will (hopefully) assign public port number 62001, because 62001 is
   next in sequence after the port number 62000 it previously assigned
   to the session between A and S.  Similarly, B's messages to A will
   cause NAT B to open a new session, to which it will (hopefully)
   assign port number 31001.  If both clients have correctly guessed the
   port numbers each NAT assigns to the new sessions, then a
   bidirectional UDP communication channel will have been established.

   Clearly, there are many things that can cause this trick to fail.  If
   the predicted port number at either NAT already happens to be in use
   by an unrelated session, then the NAT will skip over that port number
   and the connection attempt will fail.  If either NAT sometimes or
   always chooses port numbers non-sequentially, then the trick will
   fail.  If a different client behind NAT A (or B, respectively) opens
   up a new outgoing UDP connection to any external destination after A
   (B) establishes its connection with S but before sending its first
   message to B (A), then the unrelated client will inadvertently
   "steal" the desired port number.  This trick is therefore much less
   likely to work when either NAT involved is under load.

   Since in practice an application implementing this trick would still
   need to work even when one of the NATs employs Endpoint-Independent
   Mapping, the application would need to detect beforehand what kind of
   NAT is involved on either end and modify its behavior accordingly,
   increasing the complexity of the algorithm and the general
   brittleness of the network.  Finally, port number prediction has
   little chance of working if either client is behind two or more
   levels of NAT and the NAT(s) closest to the client employs Endpoint-
   Dependent Mapping.

3.6.  TCP Port Number Prediction

   This is a variant of the "TCP Hole Punching" technique to set up
   direct peer-to-peer TCP sessions across NATs employing Address-
   Dependent Mapping.

   Unfortunately, this trick may be even more fragile and timing-
   sensitive than the UDP port number prediction trick described
   earlier.  First, predicting the public port a NAT would assign could
   be wrong.  In addition, if either client's SYN arrives at the
   opposite NAT device too quickly, then the remote NAT device may
   reject the SYN with a RST packet, causing the local NAT device in
   turn to close the new session and make future SYN retransmission
   attempts using the same port numbers futile.

4.  Recent Work on NAT Traversal

   [P2P-NAT] has a detailed discussion on the UDP and TCP hole punching
   techniques for NAT traversal.  [P2P-NAT] also lists empirical results
   from running a test program [NAT-CHECK] across a number of commercial
   NAT devices.  The results indicate that UDP hole punching works
   widely on more than 80% of the NAT devices, whereas TCP hole punching
   works on just over 60% of the NAT devices tested.  The results also
   indicate that TCP or UDP hairpinning is not yet widely available on
   commercial NAT devices, as less than 25% of the devices passed the
   tests ([NAT-CHECK]) for Hairpinning.  Readers may also refer to
   [JENN-RESULT] and [SAIK-RESULT] for empirical test results in
   classifying publicly available NAT devices.  [JENN-RESULT] provides
   results of NAT classification using tests spanning across different
   IP protocols.  [SAIK-RESULT] focuses exclusively on classifying NAT
   devices by the TCP behavioral characteristics.

   [TCP-CHARACT] and [NAT-BLASTER] focus on TCP hole punching, exploring
   and comparing several alternative approaches.  [NAT-BLASTER] takes an
   analytical approach, analyzing different cases of observed NAT
   behavior and ways applications might address them.  [TCP-CHARACT]
   adopts a more empirical approach, measuring the commonality of
   different types of NAT behavior relevant to TCP hole punching.  This
   work finds that using more sophisticated techniques than those used
   in [P2P-NAT], up to 88% of currently deployed NATs can support TCP
   hole punching.

   [TEREDO] is a NAT traversal service that uses relay technology to
   connect IPv4 nodes behind NAT devices to IPv6 nodes, external to the
   NAT devices.  [TEREDO] provides for peer communication across NAT
   devices by tunneling packets over UDP, across the NAT device(s) to a
   relay node.  Teredo relays act as Rendezvous servers to relay traffic
   from private IPv4 nodes to the nodes in the external realm and vice
   versa.

   [ICE] is a NAT traversal protocol for setting up media sessions
   between peer nodes for a class of multi-media applications.  [ICE]
   requires peering nodes to run the Simple Traversal of the UDP
   Protocol through NAT (STUN) protocol [STUN] on the same port number
   used to terminate media session(s).  Applications that use signaling
   protocols such as SIP ([SIP]) may embed the NAT traversal attributes
   for the media session within the signaling sessions and use the
   offer/answer type of exchange between peer nodes to set up end-to-end
   media session(s) across NAT devices.  [ICE-TCP] is an extension of
   ICE for TCP-based media sessions.

   A number of online gaming and media-over-IP applications, including
   Instant Messaging applications, use the techniques described in the
   document for peer-to-peer connection establishment.  Some
   applications may use multiple distinct rendezvous servers for
   registration, discovery, and relay functions for load balancing,
   among other reasons.  For example, the well-known media-over-IP
   application "Skype" uses a central public server for login and
   different public servers for end-to-end relay function.

5.  Summary of Observations

5.1.  TCP/UDP Hole Punching

   TCP/UDP hole punching appears to be the most efficient existing
   method of establishing direct TCP/UDP peer-to-peer communication
   between two nodes that are both behind NATs.  This technique has been
   used with a wide variety of existing NATs.  However, applications may
   need to prepare to fall back to simple relaying when direct
   communication cannot be established.

   The TCP/UDP hole punching technique has a caveat in that it works
   only when the traversing NAT is EIM-NAT.  When the NAT device enroute
   is not EIM-NAT, the application is unable to reuse an already
   established endpoint mapping for communication with different
   external destinations and the technique would fail.  However, many of
   the NAT devices deployed in the Internet are EIM-NAT devices.  That
   makes the TCP/UDP hole punching technique broadly applicable
   [P2P-NAT].  Nevertheless, a substantial fraction of deployed NATs do
   employ Endpoint-Dependent Mapping and do not support the TCP/UDP hole
   punching technique.

5.2.  NATs Employing Endpoint-Dependent Mapping

   NATs Employing Endpoint-Dependent Mapping weren't a problem with
   client-server applications such as Web browsers, which only need to
   initiate outgoing connections.  However, in recent times, P2P
   applications such as Instant Messaging and Voice-over-IP have been in
   wide use.  NATs employing Endpoint-Dependent Mapping are not suitable
   for P2P applications as techniques such as TCP/UDP hole punching will
   not work across these NAT devices.

5.3.  Peer Discovery

   Application peers may be present within the same NAT domain or
   external to the NAT domain.  In order for all peers (those within or
   external to the NAT domain) to discover the application endpoint, an
   application may choose to register its private endpoints in addition
   to public endpoints with the rendezvous server.

5.4.  Hairpinning

   Support for hairpinning is highly beneficial to allow hosts behind
   EIM-NAT to communicate with other hosts behind the same NAT device
   through their public, possibly translated, endpoints.  Support for
   hairpinning is particularly useful in the case of large-capacity NATs
   deployed as the first level of a multi-level NAT scenario.  As
   described in Section 3.3.3, hosts behind the same first-level NAT but
   different second-level NATs do not have a way to communicate with
   each other using TCP/UDP hole punching techniques, unless the first-
   level NAT also supports hairpinning.  This would be the case even
   when all NAT devices in a deployment preserve endpoint identities.

6.  Security Considerations

   This document does not inherently create new security issues.
   Nevertheless, security risks may be present in the techniques
   described.  This section describes security risks the applications
   could inadvertently create in attempting to support direct
   communication across NAT devices.

6.1.  Lack of Authentication Can Cause Connection Hijacking

   Applications must use appropriate authentication mechanisms to
   protect their connections from accidental confusion with other
   connections as well as from malicious connection hijacking or
   denial-of-service attacks.  Applications effectively must interact
   with multiple distinct IP address domains, but are not generally
   aware of the exact topology or administrative policies defining these
   address domains.  While attempting to establish connections via
   TCP/UDP hole punching, applications send packets that may frequently
   arrive at an entirely different host than the intended one.

   For example, many consumer-level NAT devices provide Dynamic Host
   Configuration Protocol (DHCP) services that are configured by default
   to hand out site-local IP addresses in a particular address range.
   Say, a particular consumer NAT device, by default, hands out IP
   addresses starting with 192.168.1.100.  Most private home networks
   using that NAT device will have a host with that IP address, and many
   of these networks will probably have a host at address 192.168.1.101
   as well.  If host A at address 192.168.1.101 on one private network
   attempts to establish a connection by UDP hole punching with host B
   at 192.168.1.100 on a different private network, then as part of this
   process host A will send discovery packets to address 192.168.1.100
   on its local network, and host B will send discovery packets to
   address 192.168.1.101 on its network.  Clearly, these discovery
   packets will not reach the intended machine since the two hosts are
   on different private networks, but they are very likely to reach SOME
   machine on these respective networks at the standard UDP port numbers
   used by this application, potentially causing confusion, especially
   if the application is also running on those other machines and does
   not properly authenticate its messages.

   This risk due to aliasing is therefore present even without a
   malicious attacker.  If one endpoint, say, host A, is actually
   malicious, then without proper authentication the attacker could
   cause host B to connect and interact in unintended ways with another
   host on its private network having the same IP address as the
   attacker's (purported) private address.  Since the two endpoint hosts
   A and B presumably discovered each other through a public rendezvous
   server S, providing registration, discovery, and limited relay
   services, and neither S nor B has any means to verify A's reported
   private address, applications may be advised to assume that any IP
   address they find to be suspect until they successfully establish
   authenticated two-way communication.

6.2.  Denial-of-Service Attacks

   Applications and the public servers that support them must protect
   themselves against denial-of-service attacks, and ensure that they
   cannot be used by an attacker to mount denial-of-service attacks
   against other targets.  To protect themselves, applications and
   servers must avoid taking any action requiring significant local
   processing or storage resources until authenticated two-way
   communication is established.  To avoid being used as a tool for
   denial-of-service attacks, applications and servers must minimize the
   amount and rate of traffic they send to any newly discovered IP
   address until after authenticated two-way communication is
   established with the intended target.

   For example, applications that register with a public rendezvous
   server can claim to have any private IP address, or perhaps multiple
   IP addresses.  A well-connected host or group of hosts that can
   collectively attract a substantial volume of connection attempts
   (e.g., by offering to serve popular content) could mount a denial-
   of-service attack on a target host C simply by including C's IP
   address in its own list of IP addresses it registers with the
   rendezvous server.  There is no way the rendezvous server can verify
   the IP addresses, since they could well be legitimate private network
   addresses useful to other hosts for establishing network-local
   communication.  The application protocol must therefore be designed
   to size- and rate-limit traffic to unverified IP addresses in order
   to avoid the potential damage such a concentration effect could
   cause.

6.3.  Man-in-the-Middle Attacks

   Any network device on the path between a client and a public
   rendezvous server can mount a variety of man-in-the-middle attacks by
   pretending to be a NAT.  For example, suppose host A attempts to
   register with rendezvous server S, but a network-snooping attacker is
   able to observe this registration request.  The attacker could then
   flood server S with requests that are identical to the client's
   original request except with a modified source IP address, such as
   the IP address of the attacker itself.  If the attacker can convince
   the server to register the client using the attacker's IP address,
   then the attacker can make itself an active component on the path of
   all future traffic from the server AND other hosts to the original
   client, even if the attacker was originally only able to snoop the
   path from the client to the server.

   The client cannot protect itself from this attack by authenticating
   its source IP address to the rendezvous server, because in order to
   be NAT-friendly the application must allow intervening NATs to change
   the source address silently.  This appears to be an inherent security
   weakness of the NAT paradigm.  The only defense against such an
   attack is for the client to authenticate and potentially encrypt the
   actual content of its communication using appropriate higher-level
   identities, so that the interposed attacker is not able to take
   advantage of its position.  Even if all application-level
   communication is authenticated and encrypted, however, this attack
   could still be used as a traffic analysis tool for observing who the
   client is communicating with.

6.4.  Security Impact from EIM-NAT Devices

   Designing NAT devices to preserve endpoint identities does not weaken
   the security provided by the NAT device.  For example, a NAT device
   employing Endpoint-Independent Mapping and Endpoint-Dependent
   Filtering is no more "promiscuous" than a NAT device employing
   Endpoint-Dependent Mapping and Endpoint-Dependent Filtering.
   Filtering incoming traffic aggressively using Endpoint-Dependent
   Filtering while employing Endpoint-Independent Mapping allows a NAT
   device to be friendly to applications without compromising the
   principle of rejecting unsolicited incoming traffic.

   Endpoint-Independent Mapping could arguably increase the
   predictability of traffic emerging from the NAT device, by revealing
   the relationships between different TCP/UDP sessions and hence about
   the behavior of applications running within the enclave.  This
   predictability could conceivably be useful to an attacker in
   exploiting other network- or application-level vulnerabilities.  If
   the security requirements of a particular deployment scenario are so
   critical that such subtle information channels are of concern, then
   perhaps the NAT device was not to have been configured to allow
   unrestricted outgoing TCP/UDP traffic in the first place.  A NAT
   device configured to allow communication originating from specific
   applications at specific ports, or via tightly controlled
   application-level gateways, may accomplish the security requirements
   of such deployment scenarios.

7.  Acknowledgments

   The authors wish to thank Henrik Bergstrom, David Anderson, Christian
   Huitema, Dan Wing, Eric Rescorla, and other BEHAVE work group members
   for their valuable feedback on early versions of this document.  The
   authors also wish to thank Francois Audet, Kaushik Biswas, Spencer
   Dawkins, Bruce Lowekamp, and Brian Stucker for agreeing to be
   technical reviewers for this document.

8.  References

8.1.  Normative References

   [NAT-TERM]    Srisuresh, P. and M. Holdrege, "IP Network Address
                 Translator (NAT) Terminology and Considerations", RFC
                 2663, August 1999.

   [NAT-TRAD]    Srisuresh, P. and K. Egevang, "Traditional IP Network
                 Address Translator (Traditional NAT)", RFC 3022,
                 January 2001.

   [BEH-UDP]     Audet, F., Ed., and C. Jennings, "Network Address
                 Translation (NAT) Behavioral Requirements for Unicast
                 UDP", BCP 127, RFC 4787, January 2007.

8.2.  Informative References

   [BEH-APP]     Ford, B., Srisuresh, P., and D. Kegel, "Application
                 Design Guidelines for Traversal through Network Address
                 Translators", Work in Progress, March 2007.

   [BEH-ICMP]    Srisuresh, P., Ford, B., Sivakumar, S., and S. Guha,
                 "NAT Behavioral Requirements for ICMP protocol", Work
                 in Progress, February 2008.

   [BEH-TCP]     Guha, S., Biswas, K., Ford, B., Sivakumar, S., and P.
                 Srisuresh, "NAT Behavioral Requirements for TCP", Work
                 in Progress, April 2007.

   [BIDIR]       Peer-to-Peer Working Group, NAT/Firewall Working
                 Committee, "Bidirectional Peer-to-Peer Communication
                 with Interposing Firewalls and NATs", August 2001.
                 http://www.peer-to-peerwg.org/tech/nat/

   [ICE]         Rosenberg, J., "Interactive Connectivity Establishment
                 (ICE): A Methodology for Network Address Translator
                 (NAT) Traversal for Offer/Answer Protocols", Work in
                 Progress, October 2007.

   [ICE-TCP]     Rosenberg, J., "TCP Candidates with Interactive
                 Connectivity Establishment (ICE)", Work in Progress,
                 July 2007.

   [JENN-RESULT] Jennings, C., "NAT Classification Test Results", Work
                 in Progress, July 2007.

   [KEGEL]       Kegel, D., "NAT and Peer-to-Peer Networking", July
                 1999. http://www.alumni.caltech.edu/~dank/peer-nat.html

   [MIDCOM]      Srisuresh, P., Kuthan, J., Rosenberg, J., Molitor, A.,
                 and A. Rayhan, "Middlebox communication architecture
                 and framework", RFC 3303, August 2002.

   [NAT-APPL]    Senie, D., "Network Address Translator (NAT)-Friendly
                 Application Design Guidelines", RFC 3235, January 2002.

   [NAT-BLASTER] Biggadike, A., Ferullo, D., Wilson, G., and Perrig, A.,
                 "Establishing TCP Connections Between Hosts Behind
                 NATs", ACM SIGCOMM ASIA Workshop, April 2005.

   [NAT-CHECK]   Ford, B., "NAT check Program" available online as
                 http://midcom-p2p.sourceforge.net, February 2005.

   [NAT-PMP]     Cheshire, S., Krochmal, M., and K. Sekar, "NAT Port
                 Mapping Protocol (NAT-PMP)", Work in Progress, October
                 2006.

   [NAT-PROT]    Holdrege, M. and P. Srisuresh, "Protocol Complications
                 with the IP Network Address Translator", RFC 3027,
                 January 2001.

   [NAT-PT]      Tsirtsis, G. and P. Srisuresh, "Network Address
                 Translation - Protocol Translation (NAT-PT)", RFC 2766,
                 February 2000.

   [NAT-PT-HIST] Aoun, C. and E. Davies, "Reasons to Move the Network
                 Address Translator - Protocol Translator (NAT-PT) to
                 Historic Status", RFC 4966, July 2007.

   [NSIS-NSLP]   Stiemerling, M., Tschofenig, H., Aoun, C., and E.
                 Davies, "NAT/Firewall NSIS Signaling Layer Protocol
                 (NSLP)", Work in Progress, July 2007.

   [P2P-NAT]     Ford, B., Srisuresh, P., and Kegel, D., "Peer-to-Peer
                 Communication Across Network Address Translators",
                 Proceedings of the USENIX Annual Technical Conference
                 (Anaheim, CA), April 2005.

   [RFC3330]     IANA, "Special-Use IPv4 Addresses", RFC 3330, September
                 2002.

   [RFC4941]     Narten, T., Draves, R., and S. Krishnan, "Privacy
                 Extensions for Stateless Address Autoconfiguration in
                 IPv6", RFC 4941, September 2007.

   [RSIP]        Borella, M., Lo, J., Grabelsky, D., and G. Montenegro,
                 "Realm Specific IP: Framework", RFC 3102, October 2001.

   [SAIK-RESULT] Guha, Saikat,  "NAT STUNT Results" available online as
                 https://www.guha.cc/saikat/stunt-results.php.

   [SIP]         Rosenberg, J., Schulzrinne, H., Camarillo, G.,
                 Johnston, A., Peterson, J., Sparks, R., Handley, M.,
                 and E. Schooler, "SIP:  Session Initiation Protocol",
                 RFC 3261, June 2002.

   [SOCKS]       Leech, M., Ganis, M., Lee, Y., Kuris, R., Koblas, D.,
                 and L. Jones, "SOCKS Protocol Version 5", RFC 1928,
                 March 1996.

   [STUN]        Rosenberg, J., Weinberger, J., Huitema, C., and R.
                 Mahy, "STUN - Simple Traversal of User Datagram
                 Protocol (UDP) Through Network Address Translators
                 (NATs)", RFC 3489, March 2003.

   [SYM-STUN]    Takeda, Y., "Symmetric NAT Traversal using STUN", Work
                 in Progress, June 2003.

   [TCP]         Postel, J., "Transmission Control Protocol", STD 7, RFC
                 793, September 1981.

   [TCP-CHARACT] Guha, S., and Francis, P., "Characterization and
                 Measurement of TCP Traversal through NATs and
                 Firewalls", Proceedings of Internet Measurement
                 Conference (IMC), Berkeley, CA, October 2005, pp. 199-
                 211.

   [TEREDO]      Huitema, C., "Teredo: Tunneling IPv6 over UDP through
                 Network Address Translations (NATs)", RFC 4380,
                 February 2006.

   [TURN]        Rosenberg, J., Mahy, R., and P. Matthews, "Traversal
                 Using Relays around NAT (TURN): Relay Extensions to
                 Session Traversal Utilities for NAT (STUN)", Work in
                 Progress, January 2008.

   [UNSAF]       Daigle, L., Ed., and IAB, "IAB Considerations for
                 UNilateral Self-Address Fixing (UNSAF) Across Network
                 Address Translation", RFC 3424, November 2002.

   [UPNP]        UPnP Forum, "Internet Gateway Device (IGD) Standardized
                 Device Control Protocol V 1.0", November 2001,
                 http://www.upnp.org/standardizeddcps/igd.asp

   [V6-CPE-SEC]  Woodyatt, J., "Recommended Simple Security Capabilities
                 in Customer Premises Equipment for Providing
                 Residential IPv6 Internet Service", Work in Progress,
                 June 2007.

Authors' Addresses

   Pyda Srisuresh
   Kazeon Systems, Inc.
   1161 San Antonio Rd.
   Mountain View, CA 94043
   USA

   Phone: (408)836-4773
   EMail: srisuresh@yahoo.com


   Bryan Ford
   Laboratory for Computer Science
   Massachusetts Institute of Technology
   77 Massachusetts Ave.
   Cambridge, MA 02139
   USA

   Phone: (617) 253-5261
   EMail: baford@mit.edu
   Web: http://www.brynosaurus.com/


   Dan Kegel
   Kegel.com
   901 S. Sycamore Ave.
   Los Angeles, CA 90036
   USA

   Phone: 323 931-6717
   EMail: dank@kegel.com
   Web: http://www.kegel.com/

Full Copyright Statement

   Copyright (C) The IETF Trust (2008).

   This document is subject to the rights, licenses and restrictions
   contained in BCP 78, and except as set forth therein, the authors
   retain all their rights.

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND
   THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF
   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

Intellectual Property

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.